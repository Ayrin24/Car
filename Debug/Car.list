
Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004664  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004774  08004774  00014774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a0  080048a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080048a0  080048a0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048a0  080048a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080048a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001888  20000074  0800491c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018fc  0800491c  000218fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fead  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cc0  00000000  00000000  0002ff4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  00032c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  000338a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018b46  00000000  00000000  000343f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d765  00000000  00000000  0004cf3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b38b  00000000  00000000  0005a6a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ce  00000000  00000000  000e5a2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003494  00000000  00000000  000e5afc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	0800475c 	.word	0x0800475c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	0800475c 	.word	0x0800475c

08000150 <getCurentLenght>:
static uint16_t CurentBack = 0;//концовка
static uint16_t CurentLenght = 0;//колличество данных
static uint8_t buf[ARREY_SIZE];

uint16_t getCurentLenght(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
	return CurentLenght;
 8000154:	4b02      	ldr	r3, [pc, #8]	; (8000160 <getCurentLenght+0x10>)
 8000156:	881b      	ldrh	r3, [r3, #0]
}
 8000158:	4618      	mov	r0, r3
 800015a:	46bd      	mov	sp, r7
 800015c:	bc80      	pop	{r7}
 800015e:	4770      	bx	lr
 8000160:	20000094 	.word	0x20000094

08000164 <readByte>:

uint8_t readByte(void)//вычитка данных из буфера
{
 8000164:	b480      	push	{r7}
 8000166:	b083      	sub	sp, #12
 8000168:	af00      	add	r7, sp, #0
	uint8_t *pointr = buf;
 800016a:	4b13      	ldr	r3, [pc, #76]	; (80001b8 <readByte+0x54>)
 800016c:	607b      	str	r3, [r7, #4]
		if (CurentLenght > 0)
 800016e:	4b13      	ldr	r3, [pc, #76]	; (80001bc <readByte+0x58>)
 8000170:	881b      	ldrh	r3, [r3, #0]
 8000172:	2b00      	cmp	r3, #0
 8000174:	d018      	beq.n	80001a8 <readByte+0x44>
		{
			CurentLenght--;
 8000176:	4b11      	ldr	r3, [pc, #68]	; (80001bc <readByte+0x58>)
 8000178:	881b      	ldrh	r3, [r3, #0]
 800017a:	3b01      	subs	r3, #1
 800017c:	b29a      	uxth	r2, r3
 800017e:	4b0f      	ldr	r3, [pc, #60]	; (80001bc <readByte+0x58>)
 8000180:	801a      	strh	r2, [r3, #0]
			pointr = buf + CurentBack;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <readByte+0x5c>)
 8000184:	881b      	ldrh	r3, [r3, #0]
 8000186:	461a      	mov	r2, r3
 8000188:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <readByte+0x54>)
 800018a:	4413      	add	r3, r2
 800018c:	607b      	str	r3, [r7, #4]
			CurentBack++;
 800018e:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <readByte+0x5c>)
 8000190:	881b      	ldrh	r3, [r3, #0]
 8000192:	3301      	adds	r3, #1
 8000194:	b29a      	uxth	r2, r3
 8000196:	4b0a      	ldr	r3, [pc, #40]	; (80001c0 <readByte+0x5c>)
 8000198:	801a      	strh	r2, [r3, #0]
			CurentBack %= ARREY_SIZE;
 800019a:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <readByte+0x5c>)
 800019c:	881b      	ldrh	r3, [r3, #0]
 800019e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80001a2:	b29a      	uxth	r2, r3
 80001a4:	4b06      	ldr	r3, [pc, #24]	; (80001c0 <readByte+0x5c>)
 80001a6:	801a      	strh	r2, [r3, #0]
		}
	return *pointr;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	781b      	ldrb	r3, [r3, #0]
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	370c      	adds	r7, #12
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bc80      	pop	{r7}
 80001b4:	4770      	bx	lr
 80001b6:	bf00      	nop
 80001b8:	20000098 	.word	0x20000098
 80001bc:	20000094 	.word	0x20000094
 80001c0:	20000092 	.word	0x20000092

080001c4 <sendByte>:

bool sendByte(uint8_t *date)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	bool state = false;
 80001cc:	2300      	movs	r3, #0
 80001ce:	73fb      	strb	r3, [r7, #15]
		if((CurentLenght+1) < ARREY_SIZE )//проверка на переполнение буфера
 80001d0:	4b17      	ldr	r3, [pc, #92]	; (8000230 <sendByte+0x6c>)
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	3301      	adds	r3, #1
 80001d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001da:	da22      	bge.n	8000222 <sendByte+0x5e>
		{
			buf[CurentPos++] = *(uint8_t*)date; // данные
 80001dc:	4b15      	ldr	r3, [pc, #84]	; (8000234 <sendByte+0x70>)
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	1c5a      	adds	r2, r3, #1
 80001e2:	b291      	uxth	r1, r2
 80001e4:	4a13      	ldr	r2, [pc, #76]	; (8000234 <sendByte+0x70>)
 80001e6:	8011      	strh	r1, [r2, #0]
 80001e8:	461a      	mov	r2, r3
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	7819      	ldrb	r1, [r3, #0]
 80001ee:	4b12      	ldr	r3, [pc, #72]	; (8000238 <sendByte+0x74>)
 80001f0:	5499      	strb	r1, [r3, r2]
			CurentPos %= ARREY_SIZE;// проверка на выход за границы
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <sendByte+0x70>)
 80001f4:	881b      	ldrh	r3, [r3, #0]
 80001f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80001fa:	b29a      	uxth	r2, r3
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <sendByte+0x70>)
 80001fe:	801a      	strh	r2, [r3, #0]
			CurentLenght++;
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <sendByte+0x6c>)
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	3301      	adds	r3, #1
 8000206:	b29a      	uxth	r2, r3
 8000208:	4b09      	ldr	r3, [pc, #36]	; (8000230 <sendByte+0x6c>)
 800020a:	801a      	strh	r2, [r3, #0]
			state = true;
 800020c:	2301      	movs	r3, #1
 800020e:	73fb      	strb	r3, [r7, #15]

			static int coint = 0;
				coint++;
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <sendByte+0x78>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	3301      	adds	r3, #1
 8000216:	4a09      	ldr	r2, [pc, #36]	; (800023c <sendByte+0x78>)
 8000218:	6013      	str	r3, [r2, #0]
				*(int*)(buf+10 )= coint;
 800021a:	4a09      	ldr	r2, [pc, #36]	; (8000240 <sendByte+0x7c>)
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <sendByte+0x78>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	6013      	str	r3, [r2, #0]
		}
	return state;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3714      	adds	r7, #20
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	20000094 	.word	0x20000094
 8000234:	20000090 	.word	0x20000090
 8000238:	20000098 	.word	0x20000098
 800023c:	20000898 	.word	0x20000898
 8000240:	200000a2 	.word	0x200000a2

08000244 <getFreeSize>:
uint16_t getFreeSize(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	return ARREY_SIZE - 1 - CurentLenght;
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <getFreeSize+0x18>)
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	f5c3 63ff 	rsb	r3, r3, #2040	; 0x7f8
 8000250:	3307      	adds	r3, #7
 8000252:	b29b      	uxth	r3, r3
}
 8000254:	4618      	mov	r0, r3
 8000256:	46bd      	mov	sp, r7
 8000258:	bc80      	pop	{r7}
 800025a:	4770      	bx	lr
 800025c:	20000094 	.word	0x20000094

08000260 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000260:	b480      	push	{r7}
 8000262:	b085      	sub	sp, #20
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <vApplicationGetIdleTaskMemory+0x28>)
 8000270:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	4a05      	ldr	r2, [pc, #20]	; (800028c <vApplicationGetIdleTaskMemory+0x2c>)
 8000276:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2280      	movs	r2, #128	; 0x80
 800027c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800027e:	bf00      	nop
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr
 8000288:	2000089c 	.word	0x2000089c
 800028c:	200008f0 	.word	0x200008f0

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4906      	ldr	r1, [pc, #24]	; (80002c4 <__NVIC_EnableIRQ+0x34>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c8:	b5b0      	push	{r4, r5, r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ce:	f000 fbbb 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d2:	f000 f81f 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d6:	f000 f895 	bl	8000404 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002da:	f000 f861 	bl	80003a0 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <main+0x44>)
 80002e0:	1d3c      	adds	r4, r7, #4
 80002e2:	461d      	mov	r5, r3
 80002e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002f0:	1d3b      	adds	r3, r7, #4
 80002f2:	2100      	movs	r1, #0
 80002f4:	4618      	mov	r0, r3
 80002f6:	f001 fed1 	bl	800209c <osThreadCreate>
 80002fa:	4602      	mov	r2, r0
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <main+0x48>)
 80002fe:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  builsTasks();
 8000300:	f000 f9f6 	bl	80006f0 <builsTasks>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000304:	f001 fec3 	bl	800208e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000308:	e7fe      	b.n	8000308 <main+0x40>
 800030a:	bf00      	nop
 800030c:	08004780 	.word	0x08004780
 8000310:	200018b0 	.word	0x200018b0

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b090      	sub	sp, #64	; 0x40
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2228      	movs	r2, #40	; 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fe09 	bl	8003f3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000336:	2301      	movs	r3, #1
 8000338:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800033a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000344:	2301      	movs	r3, #1
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000348:	2302      	movs	r3, #2
 800034a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000350:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000352:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000356:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0318 	add.w	r3, r7, #24
 800035c:	4618      	mov	r0, r3
 800035e:	f000 ff0f 	bl	8001180 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000368:	f000 f8b6 	bl	80004d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000370:	2302      	movs	r3, #2
 8000372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800037e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000382:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2102      	movs	r1, #2
 8000388:	4618      	mov	r0, r3
 800038a:	f001 f979 	bl	8001680 <HAL_RCC_ClockConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000394:	f000 f8a0 	bl	80004d8 <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	3740      	adds	r7, #64	; 0x40
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MX_USART1_UART_Init+0x5c>)
 80003a6:	4a16      	ldr	r2, [pc, #88]	; (8000400 <MX_USART1_UART_Init+0x60>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_USART1_UART_Init+0x5c>)
 80003ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <MX_USART1_UART_Init+0x5c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_USART1_UART_Init+0x5c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_USART1_UART_Init+0x5c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <MX_USART1_UART_Init+0x5c>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_USART1_UART_Init+0x5c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <MX_USART1_UART_Init+0x5c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003d6:	4809      	ldr	r0, [pc, #36]	; (80003fc <MX_USART1_UART_Init+0x5c>)
 80003d8:	f001 faec 	bl	80019b4 <HAL_UART_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003e2:	f000 f879 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  USART1->CR1 |= USART_CR1_RXNEIE;
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <MX_USART1_UART_Init+0x60>)
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	4a05      	ldr	r2, [pc, #20]	; (8000400 <MX_USART1_UART_Init+0x60>)
 80003ec:	f043 0320 	orr.w	r3, r3, #32
 80003f0:	60d3      	str	r3, [r2, #12]
  NVIC_EnableIRQ(USART1_IRQn);
 80003f2:	2025      	movs	r0, #37	; 0x25
 80003f4:	f7ff ff4c 	bl	8000290 <__NVIC_EnableIRQ>

  /* USER CODE END USART1_Init 2 */

}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	200018b4 	.word	0x200018b4
 8000400:	40013800 	.word	0x40013800

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000418:	4b28      	ldr	r3, [pc, #160]	; (80004bc <MX_GPIO_Init+0xb8>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a27      	ldr	r2, [pc, #156]	; (80004bc <MX_GPIO_Init+0xb8>)
 800041e:	f043 0310 	orr.w	r3, r3, #16
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b25      	ldr	r3, [pc, #148]	; (80004bc <MX_GPIO_Init+0xb8>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0310 	and.w	r3, r3, #16
 800042c:	60fb      	str	r3, [r7, #12]
 800042e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000430:	4b22      	ldr	r3, [pc, #136]	; (80004bc <MX_GPIO_Init+0xb8>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a21      	ldr	r2, [pc, #132]	; (80004bc <MX_GPIO_Init+0xb8>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <MX_GPIO_Init+0xb8>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0320 	and.w	r3, r3, #32
 8000444:	60bb      	str	r3, [r7, #8]
 8000446:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000448:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <MX_GPIO_Init+0xb8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <MX_GPIO_Init+0xb8>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b19      	ldr	r3, [pc, #100]	; (80004bc <MX_GPIO_Init+0xb8>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0304 	and.w	r3, r3, #4
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000466:	4816      	ldr	r0, [pc, #88]	; (80004c0 <MX_GPIO_Init+0xbc>)
 8000468:	f000 fe58 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8000472:	4814      	ldr	r0, [pc, #80]	; (80004c4 <MX_GPIO_Init+0xc0>)
 8000474:	f000 fe52 	bl	800111c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2302      	movs	r3, #2
 8000488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	480b      	ldr	r0, [pc, #44]	; (80004c0 <MX_GPIO_Init+0xbc>)
 8000492:	f000 fcbf 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000496:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800049a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049c:	2301      	movs	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a4:	2302      	movs	r3, #2
 80004a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	4619      	mov	r1, r3
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_GPIO_Init+0xc0>)
 80004b0:	f000 fcb0 	bl	8000e14 <HAL_GPIO_Init>

}
 80004b4:	bf00      	nop
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	40011000 	.word	0x40011000
 80004c4:	40010800 	.word	0x40010800

080004c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004d0:	2001      	movs	r0, #1
 80004d2:	f001 fe2f 	bl	8002134 <osDelay>
 80004d6:	e7fb      	b.n	80004d0 <StartDefaultTask+0x8>

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004de:	e7fe      	b.n	80004de <Error_Handler+0x6>

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004e6:	4b18      	ldr	r3, [pc, #96]	; (8000548 <HAL_MspInit+0x68>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a17      	ldr	r2, [pc, #92]	; (8000548 <HAL_MspInit+0x68>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_MspInit+0x68>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_MspInit+0x68>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a11      	ldr	r2, [pc, #68]	; (8000548 <HAL_MspInit+0x68>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x68>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	210f      	movs	r1, #15
 800051a:	f06f 0001 	mvn.w	r0, #1
 800051e:	f000 fbcc 	bl	8000cba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_MspInit+0x6c>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_MspInit+0x6c>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a20      	ldr	r2, [pc, #128]	; (80005ec <HAL_UART_MspInit+0x9c>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d139      	bne.n	80005e4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <HAL_UART_MspInit+0xa0>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a1e      	ldr	r2, [pc, #120]	; (80005f0 <HAL_UART_MspInit+0xa0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b1c      	ldr	r3, [pc, #112]	; (80005f0 <HAL_UART_MspInit+0xa0>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b19      	ldr	r3, [pc, #100]	; (80005f0 <HAL_UART_MspInit+0xa0>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <HAL_UART_MspInit+0xa0>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <HAL_UART_MspInit+0xa0>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005aa:	2303      	movs	r3, #3
 80005ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	4619      	mov	r1, r3
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <HAL_UART_MspInit+0xa4>)
 80005b6:	f000 fc2d 	bl	8000e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4809      	ldr	r0, [pc, #36]	; (80005f4 <HAL_UART_MspInit+0xa4>)
 80005d0:	f000 fc20 	bl	8000e14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2105      	movs	r1, #5
 80005d8:	2025      	movs	r0, #37	; 0x25
 80005da:	f000 fb6e 	bl	8000cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005de:	2025      	movs	r0, #37	; 0x25
 80005e0:	f000 fb87 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40013800 	.word	0x40013800
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010800 	.word	0x40010800

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <MemManage_Handler+0x4>

0800060a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <UsageFault_Handler+0x4>

08000616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000626:	f000 fa55 	bl	8000ad4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800062a:	f002 ffbf 	bl	80035ac <xTaskGetSchedulerState>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d001      	beq.n	8000638 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000634:	f003 fa30 	bl	8003a98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <USART1_IRQHandler+0x10>)
 8000642:	f001 fa49 	bl	8001ad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200018b4 	.word	0x200018b4

08000650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000658:	4a14      	ldr	r2, [pc, #80]	; (80006ac <_sbrk+0x5c>)
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <_sbrk+0x60>)
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <_sbrk+0x64>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d102      	bne.n	8000672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <_sbrk+0x64>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <_sbrk+0x68>)
 8000670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	429a      	cmp	r2, r3
 800067e:	d207      	bcs.n	8000690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000680:	f003 fc26 	bl	8003ed0 <__errno>
 8000684:	4603      	mov	r3, r0
 8000686:	220c      	movs	r2, #12
 8000688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068a:	f04f 33ff 	mov.w	r3, #4294967295
 800068e:	e009      	b.n	80006a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <_sbrk+0x64>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	4a05      	ldr	r2, [pc, #20]	; (80006b4 <_sbrk+0x64>)
 80006a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20005000 	.word	0x20005000
 80006b0:	00000400 	.word	0x00000400
 80006b4:	20000af0 	.word	0x20000af0
 80006b8:	20001900 	.word	0x20001900

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <UARTIRQHandlerC>:
#include "crc.h"

UART_HandleTypeDef huart1;

void UARTIRQHandlerC()
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	getFreeSize();
 80006cc:	f7ff fdba 	bl	8000244 <getFreeSize>
	sendByte(&USART1->DR);
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <UARTIRQHandlerC+0x20>)
 80006d2:	f7ff fd77 	bl	80001c4 <sendByte>
	USART1->SR &= ~USART_SR_RXNE;
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <UARTIRQHandlerC+0x24>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <UARTIRQHandlerC+0x24>)
 80006dc:	f023 0320 	bic.w	r3, r3, #32
 80006e0:	6013      	str	r3, [r2, #0]
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40013804 	.word	0x40013804
 80006ec:	40013800 	.word	0x40013800

080006f0 <builsTasks>:
static void DriveTask(void *parm);
static void Custom_SPI_WriteByte(uint8_t data);
static xQueueHandle queueDerection;

void builsTasks(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af02      	add	r7, sp, #8
	queueDerection = xQueueCreate(1,(sizeof(uint8_t)));
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	2001      	movs	r0, #1
 80006fc:	f001 fe46 	bl	800238c <xQueueGenericCreate>
 8000700:	4602      	mov	r2, r0
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <builsTasks+0x44>)
 8000704:	601a      	str	r2, [r3, #0]
	xTaskCreate(UARTTask, "UARTTask", 128, NULL, osPriorityNormal, NULL);
 8000706:	2300      	movs	r3, #0
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	2300      	movs	r3, #0
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2300      	movs	r3, #0
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	4909      	ldr	r1, [pc, #36]	; (8000738 <builsTasks+0x48>)
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <builsTasks+0x4c>)
 8000716:	f002 f9e1 	bl	8002adc <xTaskCreate>
	xTaskCreate(DriveTask, "DriveTask", 128, NULL, osPriorityHigh, NULL);
 800071a:	2300      	movs	r3, #0
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2302      	movs	r3, #2
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2300      	movs	r3, #0
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	4906      	ldr	r1, [pc, #24]	; (8000740 <builsTasks+0x50>)
 8000728:	4806      	ldr	r0, [pc, #24]	; (8000744 <builsTasks+0x54>)
 800072a:	f002 f9d7 	bl	8002adc <xTaskCreate>
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000af4 	.word	0x20000af4
 8000738:	0800479c 	.word	0x0800479c
 800073c:	080007fd 	.word	0x080007fd
 8000740:	080047a8 	.word	0x080047a8
 8000744:	08000925 	.word	0x08000925

08000748 <printAT>:

void printAT(char *str)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	static char print[100];

	int size = sprintf(print,"%s\r\n",str);
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4908      	ldr	r1, [pc, #32]	; (8000774 <printAT+0x2c>)
 8000754:	4808      	ldr	r0, [pc, #32]	; (8000778 <printAT+0x30>)
 8000756:	f003 fbf9 	bl	8003f4c <siprintf>
 800075a:	60f8      	str	r0, [r7, #12]

	HAL_UART_Transmit_IT(&huart1, (uint8_t*)print,(uint16_t)size);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	b29b      	uxth	r3, r3
 8000760:	461a      	mov	r2, r3
 8000762:	4905      	ldr	r1, [pc, #20]	; (8000778 <printAT+0x30>)
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <printAT+0x34>)
 8000766:	f001 f972 	bl	8001a4e <HAL_UART_Transmit_IT>
}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	080047b4 	.word	0x080047b4
 8000778:	20000af8 	.word	0x20000af8
 800077c:	200018b4 	.word	0x200018b4

08000780 <Custom_SPI_WriteByte>:

void Custom_SPI_WriteByte(uint8_t data)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	GPIOA->BSRR = GPIO_BSRR_BR4;
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <Custom_SPI_WriteByte+0x78>)
 800078c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000790:	611a      	str	r2, [r3, #16]

	for(uint8_t i = 0; i<8; i++)
 8000792:	2300      	movs	r3, #0
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	e025      	b.n	80007e4 <Custom_SPI_WriteByte+0x64>
	{
		if(data & (1<<(7-i))) GPIOA->BSRR = GPIO_BSRR_BR6;
 8000798:	79fa      	ldrb	r2, [r7, #7]
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	f1c3 0307 	rsb	r3, r3, #7
 80007a0:	fa42 f303 	asr.w	r3, r2, r3
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d004      	beq.n	80007b6 <Custom_SPI_WriteByte+0x36>
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <Custom_SPI_WriteByte+0x78>)
 80007ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007b2:	611a      	str	r2, [r3, #16]
 80007b4:	e002      	b.n	80007bc <Custom_SPI_WriteByte+0x3c>
		else GPIOA->BSRR = GPIO_BSRR_BS6;
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <Custom_SPI_WriteByte+0x78>)
 80007b8:	2240      	movs	r2, #64	; 0x40
 80007ba:	611a      	str	r2, [r3, #16]

		GPIOA->BSRR = GPIO_BSRR_BS5;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <Custom_SPI_WriteByte+0x78>)
 80007be:	2220      	movs	r2, #32
 80007c0:	611a      	str	r2, [r3, #16]
		osDelay(1);
 80007c2:	2001      	movs	r0, #1
 80007c4:	f001 fcb6 	bl	8002134 <osDelay>
		GPIOA->BSRR = GPIO_BSRR_BR5;
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <Custom_SPI_WriteByte+0x78>)
 80007ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007ce:	611a      	str	r2, [r3, #16]
		osDelay(1);
 80007d0:	2001      	movs	r0, #1
 80007d2:	f001 fcaf 	bl	8002134 <osDelay>
		GPIOA->BSRR = GPIO_BSRR_BR6;
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <Custom_SPI_WriteByte+0x78>)
 80007d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007dc:	611a      	str	r2, [r3, #16]
	for(uint8_t i = 0; i<8; i++)
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	3301      	adds	r3, #1
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	7bfb      	ldrb	r3, [r7, #15]
 80007e6:	2b07      	cmp	r3, #7
 80007e8:	d9d6      	bls.n	8000798 <Custom_SPI_WriteByte+0x18>
	}

	GPIOA->BSRR = GPIO_BSRR_BS4;
 80007ea:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <Custom_SPI_WriteByte+0x78>)
 80007ec:	2210      	movs	r2, #16
 80007ee:	611a      	str	r2, [r3, #16]
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40010800 	.word	0x40010800

080007fc <UARTTask>:
	test st;
} getDataUn;


static void UARTTask(void *parm)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	printAT("AT");
 8000804:	483c      	ldr	r0, [pc, #240]	; (80008f8 <UARTTask+0xfc>)
 8000806:	f7ff ff9f 	bl	8000748 <printAT>
	osDelay(1000);
 800080a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800080e:	f001 fc91 	bl	8002134 <osDelay>

	printAT("AT+RST");
 8000812:	483a      	ldr	r0, [pc, #232]	; (80008fc <UARTTask+0x100>)
 8000814:	f7ff ff98 	bl	8000748 <printAT>
	osDelay(1000);
 8000818:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800081c:	f001 fc8a 	bl	8002134 <osDelay>

	printAT("AT+SLEEP=0");
 8000820:	4837      	ldr	r0, [pc, #220]	; (8000900 <UARTTask+0x104>)
 8000822:	f7ff ff91 	bl	8000748 <printAT>
	osDelay(1000);
 8000826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082a:	f001 fc83 	bl	8002134 <osDelay>

	printAT("AT+CWMODE_DEF=1");
 800082e:	4835      	ldr	r0, [pc, #212]	; (8000904 <UARTTask+0x108>)
 8000830:	f7ff ff8a 	bl	8000748 <printAT>
	osDelay(1000);
 8000834:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000838:	f001 fc7c 	bl	8002134 <osDelay>

	printAT("AT+CWJAP=\"Donot\",\"Kompplaytatyana2606\"");
 800083c:	4832      	ldr	r0, [pc, #200]	; (8000908 <UARTTask+0x10c>)
 800083e:	f7ff ff83 	bl	8000748 <printAT>
	osDelay(5000);
 8000842:	f241 3088 	movw	r0, #5000	; 0x1388
 8000846:	f001 fc75 	bl	8002134 <osDelay>

	printAT("AT+CIFSR");
 800084a:	4830      	ldr	r0, [pc, #192]	; (800090c <UARTTask+0x110>)
 800084c:	f7ff ff7c 	bl	8000748 <printAT>
	osDelay(5000);
 8000850:	f241 3088 	movw	r0, #5000	; 0x1388
 8000854:	f001 fc6e 	bl	8002134 <osDelay>

	printAT("AT+CIPSTART=\"TCP\",\"192.168.4.1\",333");
 8000858:	482d      	ldr	r0, [pc, #180]	; (8000910 <UARTTask+0x114>)
 800085a:	f7ff ff75 	bl	8000748 <printAT>
	osDelay(5000);
 800085e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000862:	f001 fc67 	bl	8002134 <osDelay>

	GPIOA->BSRR = GPIO_BSRR_BR7;
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <UARTTask+0x118>)
 8000868:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800086c:	611a      	str	r2, [r3, #16]

	getDataUn test1;
	uint8_t OK=0x0d0a4f4b;
 800086e:	234b      	movs	r3, #75	; 0x4b
 8000870:	75fb      	strb	r3, [r7, #23]
	uint32_t Template=0x442c323a;
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <UARTTask+0x11c>)
 8000874:	613b      	str	r3, [r7, #16]
	while(1)
	{
		uint32_t crc;
		uint8_t direction;
		uint32_t crc1;
		if(getCurentLenght())
 8000876:	f7ff fc6b 	bl	8000150 <getCurentLenght>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0fa      	beq.n	8000876 <UARTTask+0x7a>
		{
			com = com << 8;
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	021b      	lsls	r3, r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
			com |= (uint32_t)readByte();
 8000886:	f7ff fc6d 	bl	8000164 <readByte>
 800088a:	4603      	mov	r3, r0
 800088c:	461a      	mov	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	4313      	orrs	r3, r2
 8000892:	61fb      	str	r3, [r7, #28]
		/*	if(com == OK)
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
				osDelay(200);
			}*/
			if(com == Template)
 8000894:	69fa      	ldr	r2, [r7, #28]
 8000896:	693b      	ldr	r3, [r7, #16]
 8000898:	429a      	cmp	r2, r3
 800089a:	d1ec      	bne.n	8000876 <UARTTask+0x7a>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	481e      	ldr	r0, [pc, #120]	; (800091c <UARTTask+0x120>)
 80008a2:	f000 fc53 	bl	800114c <HAL_GPIO_TogglePin>
				for(int i = 0; i<sizeof(test1) ; i++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	e019      	b.n	80008e0 <UARTTask+0xe4>
				{
					if(getCurentLenght())
 80008ac:	f7ff fc50 	bl	8000150 <getCurentLenght>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00a      	beq.n	80008cc <UARTTask+0xd0>
					{
						test1.array[i]=readByte();
 80008b6:	f7ff fc55 	bl	8000164 <readByte>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4619      	mov	r1, r3
 80008be:	f107 020c 	add.w	r2, r7, #12
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	4413      	add	r3, r2
 80008c6:	460a      	mov	r2, r1
 80008c8:	701a      	strb	r2, [r3, #0]
 80008ca:	e006      	b.n	80008da <UARTTask+0xde>

					}
					else
					{
						osDelay(1000);
 80008cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d0:	f001 fc30 	bl	8002134 <osDelay>
						i--;
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
				for(int i = 0; i<sizeof(test1) ; i++)
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	3301      	adds	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d9e2      	bls.n	80008ac <UARTTask+0xb0>
					}
				}
				//xQueueReceive(queueDerection, NULL, 0);
				xQueueSend(queueDerection, &test1.st.direction, 0);
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <UARTTask+0x124>)
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	f107 010c 	add.w	r1, r7, #12
 80008ee:	2300      	movs	r3, #0
 80008f0:	2200      	movs	r2, #0
 80008f2:	f001 fda9 	bl	8002448 <xQueueGenericSend>
	{
 80008f6:	e7be      	b.n	8000876 <UARTTask+0x7a>
 80008f8:	080047bc 	.word	0x080047bc
 80008fc:	080047c0 	.word	0x080047c0
 8000900:	080047c8 	.word	0x080047c8
 8000904:	080047d4 	.word	0x080047d4
 8000908:	080047e4 	.word	0x080047e4
 800090c:	0800480c 	.word	0x0800480c
 8000910:	08004818 	.word	0x08004818
 8000914:	40010800 	.word	0x40010800
 8000918:	442c323a 	.word	0x442c323a
 800091c:	40011000 	.word	0x40011000
 8000920:	20000af4 	.word	0x20000af4

08000924 <DriveTask>:
	DIRECTION_front,
	DIRECTION_back
} DIRECTION;

static void DriveTask(void *parm)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	uint8_t derection;
	while(1)
	{
		xQueueReceive(queueDerection, &derection, portMAX_DELAY);
 800092c:	4b32      	ldr	r3, [pc, #200]	; (80009f8 <DriveTask+0xd4>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f107 010f 	add.w	r1, r7, #15
 8000934:	f04f 32ff 	mov.w	r2, #4294967295
 8000938:	4618      	mov	r0, r3
 800093a:	f001 fe83 	bl	8002644 <xQueueReceive>

		asm("NOP");
 800093e:	bf00      	nop
		switch(derection)
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	3b01      	subs	r3, #1
 8000944:	2b07      	cmp	r3, #7
 8000946:	d84f      	bhi.n	80009e8 <DriveTask+0xc4>
 8000948:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <DriveTask+0x2c>)
 800094a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094e:	bf00      	nop
 8000950:	080009cb 	.word	0x080009cb
 8000954:	08000971 	.word	0x08000971
 8000958:	080009e9 	.word	0x080009e9
 800095c:	080009ad 	.word	0x080009ad
 8000960:	080009e9 	.word	0x080009e9
 8000964:	080009e9 	.word	0x080009e9
 8000968:	080009e9 	.word	0x080009e9
 800096c:	0800098f 	.word	0x0800098f
		{
		case (1<<DIRECTION_right):
			Custom_SPI_WriteByte((1<<7));
 8000970:	2080      	movs	r0, #128	; 0x80
 8000972:	f7ff ff05 	bl	8000780 <Custom_SPI_WriteByte>
			osDelay(2000);
 8000976:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800097a:	f001 fbdb 	bl	8002134 <osDelay>
			Custom_SPI_WriteByte(0);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fefe 	bl	8000780 <Custom_SPI_WriteByte>
			osDelay(1000);
 8000984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000988:	f001 fbd4 	bl	8002134 <osDelay>
		break;
 800098c:	e033      	b.n	80009f6 <DriveTask+0xd2>
		case (1<<DIRECTION_back):
			Custom_SPI_WriteByte((1<<3));
 800098e:	2008      	movs	r0, #8
 8000990:	f7ff fef6 	bl	8000780 <Custom_SPI_WriteByte>
			osDelay(2000);
 8000994:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000998:	f001 fbcc 	bl	8002134 <osDelay>
			Custom_SPI_WriteByte(0);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff feef 	bl	8000780 <Custom_SPI_WriteByte>
			osDelay(1000);
 80009a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009a6:	f001 fbc5 	bl	8002134 <osDelay>
		break;
 80009aa:	e024      	b.n	80009f6 <DriveTask+0xd2>
		case (1<<DIRECTION_front):
			Custom_SPI_WriteByte((1<<2));
 80009ac:	2004      	movs	r0, #4
 80009ae:	f7ff fee7 	bl	8000780 <Custom_SPI_WriteByte>
			osDelay(2000);
 80009b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009b6:	f001 fbbd 	bl	8002134 <osDelay>
			Custom_SPI_WriteByte(0);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff fee0 	bl	8000780 <Custom_SPI_WriteByte>
			osDelay(1000);
 80009c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c4:	f001 fbb6 	bl	8002134 <osDelay>
		break;
 80009c8:	e015      	b.n	80009f6 <DriveTask+0xd2>
		case (1<<DIRECTION_left):
			Custom_SPI_WriteByte((1<<5));
 80009ca:	2020      	movs	r0, #32
 80009cc:	f7ff fed8 	bl	8000780 <Custom_SPI_WriteByte>
			osDelay(2000);
 80009d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009d4:	f001 fbae 	bl	8002134 <osDelay>
			Custom_SPI_WriteByte(0);
 80009d8:	2000      	movs	r0, #0
 80009da:	f7ff fed1 	bl	8000780 <Custom_SPI_WriteByte>
			osDelay(1000);
 80009de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e2:	f001 fba7 	bl	8002134 <osDelay>
			break;
 80009e6:	e006      	b.n	80009f6 <DriveTask+0xd2>
		default:
			Custom_SPI_WriteByte(0);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f7ff fec9 	bl	8000780 <Custom_SPI_WriteByte>
			osDelay(1000);
 80009ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f2:	f001 fb9f 	bl	8002134 <osDelay>
		xQueueReceive(queueDerection, &derection, portMAX_DELAY);
 80009f6:	e799      	b.n	800092c <DriveTask+0x8>
 80009f8:	20000af4 	.word	0x20000af4

080009fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009fe:	e003      	b.n	8000a08 <LoopCopyDataInit>

08000a00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a06:	3104      	adds	r1, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a08:	480a      	ldr	r0, [pc, #40]	; (8000a34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a10:	d3f6      	bcc.n	8000a00 <CopyDataInit>
  ldr r2, =_sbss
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a14:	e002      	b.n	8000a1c <LoopFillZerobss>

08000a16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a18:	f842 3b04 	str.w	r3, [r2], #4

08000a1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a20:	d3f9      	bcc.n	8000a16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a22:	f7ff fe4b 	bl	80006bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a26:	f003 fa59 	bl	8003edc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2a:	f7ff fc4d 	bl	80002c8 <main>
  bx lr
 8000a2e:	4770      	bx	lr
  ldr r3, =_sidata
 8000a30:	080048a8 	.word	0x080048a8
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a38:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8000a3c:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8000a40:	200018fc 	.word	0x200018fc

08000a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_2_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <HAL_Init+0x28>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	; (8000a70 <HAL_Init+0x28>)
 8000a52:	f043 0310 	orr.w	r3, r3, #16
 8000a56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f923 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f000 f808 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff fd3c 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40022000 	.word	0x40022000

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_InitTick+0x54>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_InitTick+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f93b 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f903 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	; (8000ad0 <HAL_InitTick+0x5c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <HAL_IncTick+0x1c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <HAL_IncTick+0x20>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <HAL_IncTick+0x20>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200018f4 	.word	0x200018f4

08000af8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b02      	ldr	r3, [pc, #8]	; (8000b08 <HAL_GetTick+0x10>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	200018f4 	.word	0x200018f4

08000b0c <__NVIC_SetPriorityGrouping>:
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4906      	ldr	r1, [pc, #24]	; (8000ba4 <__NVIC_EnableIRQ+0x34>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff90 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff2d 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff42 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff90 	bl	8000bfc <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5f 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff35 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d005      	beq.n	8000d4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2204      	movs	r2, #4
 8000d42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	e051      	b.n	8000dee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 020e 	bic.w	r2, r2, #14
 8000d58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0201 	bic.w	r2, r2, #1
 8000d68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <HAL_DMA_Abort_IT+0xd0>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d029      	beq.n	8000dc8 <HAL_DMA_Abort_IT+0xa0>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a20      	ldr	r2, [pc, #128]	; (8000dfc <HAL_DMA_Abort_IT+0xd4>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d022      	beq.n	8000dc4 <HAL_DMA_Abort_IT+0x9c>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <HAL_DMA_Abort_IT+0xd8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d01a      	beq.n	8000dbe <HAL_DMA_Abort_IT+0x96>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <HAL_DMA_Abort_IT+0xdc>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d012      	beq.n	8000db8 <HAL_DMA_Abort_IT+0x90>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a1c      	ldr	r2, [pc, #112]	; (8000e08 <HAL_DMA_Abort_IT+0xe0>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d00a      	beq.n	8000db2 <HAL_DMA_Abort_IT+0x8a>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a1a      	ldr	r2, [pc, #104]	; (8000e0c <HAL_DMA_Abort_IT+0xe4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d102      	bne.n	8000dac <HAL_DMA_Abort_IT+0x84>
 8000da6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000daa:	e00e      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db0:	e00b      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000db2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db6:	e008      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dbc:	e005      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc2:	e002      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	e000      	b.n	8000dca <HAL_DMA_Abort_IT+0xa2>
 8000dc8:	2301      	movs	r3, #1
 8000dca:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <HAL_DMA_Abort_IT+0xe8>)
 8000dcc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	4798      	blx	r3
    } 
  }
  return status;
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40020008 	.word	0x40020008
 8000dfc:	4002001c 	.word	0x4002001c
 8000e00:	40020030 	.word	0x40020030
 8000e04:	40020044 	.word	0x40020044
 8000e08:	40020058 	.word	0x40020058
 8000e0c:	4002006c 	.word	0x4002006c
 8000e10:	40020000 	.word	0x40020000

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b08b      	sub	sp, #44	; 0x2c
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	e169      	b.n	80010fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	f040 8158 	bne.w	80010f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	4a9a      	ldr	r2, [pc, #616]	; (80010b4 <HAL_GPIO_Init+0x2a0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d05e      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e50:	4a98      	ldr	r2, [pc, #608]	; (80010b4 <HAL_GPIO_Init+0x2a0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d875      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e56:	4a98      	ldr	r2, [pc, #608]	; (80010b8 <HAL_GPIO_Init+0x2a4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d058      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e5c:	4a96      	ldr	r2, [pc, #600]	; (80010b8 <HAL_GPIO_Init+0x2a4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d86f      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e62:	4a96      	ldr	r2, [pc, #600]	; (80010bc <HAL_GPIO_Init+0x2a8>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d052      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e68:	4a94      	ldr	r2, [pc, #592]	; (80010bc <HAL_GPIO_Init+0x2a8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d869      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e6e:	4a94      	ldr	r2, [pc, #592]	; (80010c0 <HAL_GPIO_Init+0x2ac>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d04c      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e74:	4a92      	ldr	r2, [pc, #584]	; (80010c0 <HAL_GPIO_Init+0x2ac>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d863      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e7a:	4a92      	ldr	r2, [pc, #584]	; (80010c4 <HAL_GPIO_Init+0x2b0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d046      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
 8000e80:	4a90      	ldr	r2, [pc, #576]	; (80010c4 <HAL_GPIO_Init+0x2b0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d85d      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d82a      	bhi.n	8000ee0 <HAL_GPIO_Init+0xcc>
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d859      	bhi.n	8000f42 <HAL_GPIO_Init+0x12e>
 8000e8e:	a201      	add	r2, pc, #4	; (adr r2, 8000e94 <HAL_GPIO_Init+0x80>)
 8000e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e94:	08000f0f 	.word	0x08000f0f
 8000e98:	08000ee9 	.word	0x08000ee9
 8000e9c:	08000efb 	.word	0x08000efb
 8000ea0:	08000f3d 	.word	0x08000f3d
 8000ea4:	08000f43 	.word	0x08000f43
 8000ea8:	08000f43 	.word	0x08000f43
 8000eac:	08000f43 	.word	0x08000f43
 8000eb0:	08000f43 	.word	0x08000f43
 8000eb4:	08000f43 	.word	0x08000f43
 8000eb8:	08000f43 	.word	0x08000f43
 8000ebc:	08000f43 	.word	0x08000f43
 8000ec0:	08000f43 	.word	0x08000f43
 8000ec4:	08000f43 	.word	0x08000f43
 8000ec8:	08000f43 	.word	0x08000f43
 8000ecc:	08000f43 	.word	0x08000f43
 8000ed0:	08000f43 	.word	0x08000f43
 8000ed4:	08000f43 	.word	0x08000f43
 8000ed8:	08000ef1 	.word	0x08000ef1
 8000edc:	08000f05 	.word	0x08000f05
 8000ee0:	4a79      	ldr	r2, [pc, #484]	; (80010c8 <HAL_GPIO_Init+0x2b4>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d013      	beq.n	8000f0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ee6:	e02c      	b.n	8000f42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	623b      	str	r3, [r7, #32]
          break;
 8000eee:	e029      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e024      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	3308      	adds	r3, #8
 8000f00:	623b      	str	r3, [r7, #32]
          break;
 8000f02:	e01f      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	330c      	adds	r3, #12
 8000f0a:	623b      	str	r3, [r7, #32]
          break;
 8000f0c:	e01a      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d102      	bne.n	8000f1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f16:	2304      	movs	r3, #4
 8000f18:	623b      	str	r3, [r7, #32]
          break;
 8000f1a:	e013      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d105      	bne.n	8000f30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f24:	2308      	movs	r3, #8
 8000f26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69fa      	ldr	r2, [r7, #28]
 8000f2c:	611a      	str	r2, [r3, #16]
          break;
 8000f2e:	e009      	b.n	8000f44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f30:	2308      	movs	r3, #8
 8000f32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	615a      	str	r2, [r3, #20]
          break;
 8000f3a:	e003      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
          break;
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x130>
          break;
 8000f42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	2bff      	cmp	r3, #255	; 0xff
 8000f48:	d801      	bhi.n	8000f4e <HAL_GPIO_Init+0x13a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	e001      	b.n	8000f52 <HAL_GPIO_Init+0x13e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3304      	adds	r3, #4
 8000f52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2bff      	cmp	r3, #255	; 0xff
 8000f58:	d802      	bhi.n	8000f60 <HAL_GPIO_Init+0x14c>
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	e002      	b.n	8000f66 <HAL_GPIO_Init+0x152>
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	3b08      	subs	r3, #8
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	401a      	ands	r2, r3
 8000f78:	6a39      	ldr	r1, [r7, #32]
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f80:	431a      	orrs	r2, r3
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 80b1 	beq.w	80010f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <HAL_GPIO_Init+0x2b8>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a4c      	ldr	r2, [pc, #304]	; (80010cc <HAL_GPIO_Init+0x2b8>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <HAL_GPIO_Init+0x2b8>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fac:	4a48      	ldr	r2, [pc, #288]	; (80010d0 <HAL_GPIO_Init+0x2bc>)
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	220f      	movs	r2, #15
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a40      	ldr	r2, [pc, #256]	; (80010d4 <HAL_GPIO_Init+0x2c0>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d013      	beq.n	8001000 <HAL_GPIO_Init+0x1ec>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a3f      	ldr	r2, [pc, #252]	; (80010d8 <HAL_GPIO_Init+0x2c4>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d00d      	beq.n	8000ffc <HAL_GPIO_Init+0x1e8>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a3e      	ldr	r2, [pc, #248]	; (80010dc <HAL_GPIO_Init+0x2c8>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d007      	beq.n	8000ff8 <HAL_GPIO_Init+0x1e4>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a3d      	ldr	r2, [pc, #244]	; (80010e0 <HAL_GPIO_Init+0x2cc>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d101      	bne.n	8000ff4 <HAL_GPIO_Init+0x1e0>
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e006      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	e004      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <HAL_GPIO_Init+0x1ee>
 8001000:	2300      	movs	r3, #0
 8001002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001004:	f002 0203 	and.w	r2, r2, #3
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	4093      	lsls	r3, r2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001012:	492f      	ldr	r1, [pc, #188]	; (80010d0 <HAL_GPIO_Init+0x2bc>)
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	089b      	lsrs	r3, r3, #2
 8001018:	3302      	adds	r3, #2
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d006      	beq.n	800103a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800102c:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	492c      	ldr	r1, [pc, #176]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	600b      	str	r3, [r1, #0]
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800103a:	4b2a      	ldr	r3, [pc, #168]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	43db      	mvns	r3, r3
 8001042:	4928      	ldr	r1, [pc, #160]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001044:	4013      	ands	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4922      	ldr	r1, [pc, #136]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001062:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	43db      	mvns	r3, r3
 800106a:	491e      	ldr	r1, [pc, #120]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800106c:	4013      	ands	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d006      	beq.n	800108a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	4918      	ldr	r1, [pc, #96]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	608b      	str	r3, [r1, #8]
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	43db      	mvns	r3, r3
 8001092:	4914      	ldr	r1, [pc, #80]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 8001094:	4013      	ands	r3, r2
 8001096:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d021      	beq.n	80010e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	490e      	ldr	r1, [pc, #56]	; (80010e4 <HAL_GPIO_Init+0x2d0>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	60cb      	str	r3, [r1, #12]
 80010b0:	e021      	b.n	80010f6 <HAL_GPIO_Init+0x2e2>
 80010b2:	bf00      	nop
 80010b4:	10320000 	.word	0x10320000
 80010b8:	10310000 	.word	0x10310000
 80010bc:	10220000 	.word	0x10220000
 80010c0:	10210000 	.word	0x10210000
 80010c4:	10120000 	.word	0x10120000
 80010c8:	10110000 	.word	0x10110000
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000
 80010d4:	40010800 	.word	0x40010800
 80010d8:	40010c00 	.word	0x40010c00
 80010dc:	40011000 	.word	0x40011000
 80010e0:	40011400 	.word	0x40011400
 80010e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	4909      	ldr	r1, [pc, #36]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	3301      	adds	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	fa22 f303 	lsr.w	r3, r2, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	f47f ae8e 	bne.w	8000e28 <HAL_GPIO_Init+0x14>
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	372c      	adds	r7, #44	; 0x2c
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	611a      	str	r2, [r3, #16]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43d9      	mvns	r1, r3
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	400b      	ands	r3, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	611a      	str	r2, [r3, #16]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
	...

08001180 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e26c      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	f000 8087 	beq.w	80012ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a0:	4b92      	ldr	r3, [pc, #584]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d00c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011ac:	4b8f      	ldr	r3, [pc, #572]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	d112      	bne.n	80011de <HAL_RCC_OscConfig+0x5e>
 80011b8:	4b8c      	ldr	r3, [pc, #560]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c4:	d10b      	bne.n	80011de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c6:	4b89      	ldr	r3, [pc, #548]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d06c      	beq.n	80012ac <HAL_RCC_OscConfig+0x12c>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d168      	bne.n	80012ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e246      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0x76>
 80011e8:	4b80      	ldr	r3, [pc, #512]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a7f      	ldr	r2, [pc, #508]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80011ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e02e      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0x98>
 80011fe:	4b7b      	ldr	r3, [pc, #492]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a7a      	ldr	r2, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b78      	ldr	r3, [pc, #480]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a77      	ldr	r2, [pc, #476]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e01d      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0xbc>
 8001222:	4b72      	ldr	r3, [pc, #456]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a71      	ldr	r2, [pc, #452]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b6f      	ldr	r3, [pc, #444]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a6e      	ldr	r2, [pc, #440]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0xd4>
 800123c:	4b6b      	ldr	r3, [pc, #428]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a6a      	ldr	r2, [pc, #424]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b68      	ldr	r3, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a67      	ldr	r2, [pc, #412]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 800124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001252:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fc4c 	bl	8000af8 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fc48 	bl	8000af8 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e1fa      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0xe4>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fc38 	bl	8000af8 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fc34 	bl	8000af8 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e1e6      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	4b53      	ldr	r3, [pc, #332]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x10c>
 80012aa:	e000      	b.n	80012ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d063      	beq.n	8001382 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ba:	4b4c      	ldr	r3, [pc, #304]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00b      	beq.n	80012de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d11c      	bne.n	800130c <HAL_RCC_OscConfig+0x18c>
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d116      	bne.n	800130c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	4b43      	ldr	r3, [pc, #268]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d005      	beq.n	80012f6 <HAL_RCC_OscConfig+0x176>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691b      	ldr	r3, [r3, #16]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d001      	beq.n	80012f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e1ba      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b3d      	ldr	r3, [pc, #244]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	4939      	ldr	r1, [pc, #228]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001306:	4313      	orrs	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130a:	e03a      	b.n	8001382 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d020      	beq.n	8001356 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001314:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131a:	f7ff fbed 	bl	8000af8 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff fbe9 	bl	8000af8 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e19b      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001340:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4927      	ldr	r1, [pc, #156]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]
 8001354:	e015      	b.n	8001382 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <HAL_RCC_OscConfig+0x270>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fbcc 	bl	8000af8 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff fbc8 	bl	8000af8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e17a      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d03a      	beq.n	8001404 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d019      	beq.n	80013ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139c:	f7ff fbac 	bl	8000af8 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a4:	f7ff fba8 	bl	8000af8 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e15a      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_RCC_OscConfig+0x26c>)
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f0      	beq.n	80013a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f000 fad8 	bl	8001978 <RCC_Delay>
 80013c8:	e01c      	b.n	8001404 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_RCC_OscConfig+0x274>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff fb92 	bl	8000af8 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d6:	e00f      	b.n	80013f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fb8e 	bl	8000af8 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d908      	bls.n	80013f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e140      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	42420000 	.word	0x42420000
 80013f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f8:	4b9e      	ldr	r3, [pc, #632]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1e9      	bne.n	80013d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a6 	beq.w	800155e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001416:	4b97      	ldr	r3, [pc, #604]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10d      	bne.n	800143e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	4b94      	ldr	r3, [pc, #592]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a93      	ldr	r2, [pc, #588]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]
 800142e:	4b91      	ldr	r3, [pc, #580]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143a:	2301      	movs	r3, #1
 800143c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b8e      	ldr	r3, [pc, #568]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144a:	4b8b      	ldr	r3, [pc, #556]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a8a      	ldr	r2, [pc, #552]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001456:	f7ff fb4f 	bl	8000af8 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145e:	f7ff fb4b 	bl	8000af8 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b64      	cmp	r3, #100	; 0x64
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e0fd      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b81      	ldr	r3, [pc, #516]	; (8001678 <HAL_RCC_OscConfig+0x4f8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x312>
 8001484:	4b7b      	ldr	r3, [pc, #492]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4a7a      	ldr	r2, [pc, #488]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6213      	str	r3, [r2, #32]
 8001490:	e02d      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x334>
 800149a:	4b76      	ldr	r3, [pc, #472]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	4a75      	ldr	r2, [pc, #468]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	f023 0301 	bic.w	r3, r3, #1
 80014a4:	6213      	str	r3, [r2, #32]
 80014a6:	4b73      	ldr	r3, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	4a72      	ldr	r2, [pc, #456]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	6213      	str	r3, [r2, #32]
 80014b2:	e01c      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d10c      	bne.n	80014d6 <HAL_RCC_OscConfig+0x356>
 80014bc:	4b6d      	ldr	r3, [pc, #436]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	4a6c      	ldr	r2, [pc, #432]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6213      	str	r3, [r2, #32]
 80014c8:	4b6a      	ldr	r3, [pc, #424]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	4a69      	ldr	r2, [pc, #420]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6213      	str	r3, [r2, #32]
 80014d4:	e00b      	b.n	80014ee <HAL_RCC_OscConfig+0x36e>
 80014d6:	4b67      	ldr	r3, [pc, #412]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a66      	ldr	r2, [pc, #408]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	4b64      	ldr	r3, [pc, #400]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4a63      	ldr	r2, [pc, #396]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d015      	beq.n	8001522 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff faff 	bl	8000af8 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fafb 	bl	8000af8 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e0ab      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001514:	4b57      	ldr	r3, [pc, #348]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0ee      	beq.n	80014fe <HAL_RCC_OscConfig+0x37e>
 8001520:	e014      	b.n	800154c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff fae9 	bl	8000af8 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff fae5 	bl	8000af8 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e095      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	4b4c      	ldr	r3, [pc, #304]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ee      	bne.n	800152a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d105      	bne.n	800155e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001552:	4b48      	ldr	r3, [pc, #288]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a47      	ldr	r2, [pc, #284]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 8081 	beq.w	800166a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001568:	4b42      	ldr	r3, [pc, #264]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d061      	beq.n	8001638 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d146      	bne.n	800160a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_RCC_OscConfig+0x4fc>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fab9 	bl	8000af8 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fab5 	bl	8000af8 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e067      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800159c:	4b35      	ldr	r3, [pc, #212]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b0:	d108      	bne.n	80015c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015b2:	4b30      	ldr	r3, [pc, #192]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	492d      	ldr	r1, [pc, #180]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a19      	ldr	r1, [r3, #32]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	430b      	orrs	r3, r1
 80015d6:	4927      	ldr	r1, [pc, #156]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015dc:	4b27      	ldr	r3, [pc, #156]	; (800167c <HAL_RCC_OscConfig+0x4fc>)
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fa89 	bl	8000af8 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff fa85 	bl	8000af8 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e037      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015fc:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0f0      	beq.n	80015ea <HAL_RCC_OscConfig+0x46a>
 8001608:	e02f      	b.n	800166a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <HAL_RCC_OscConfig+0x4fc>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff fa72 	bl	8000af8 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fa6e 	bl	8000af8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e020      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x498>
 8001636:	e018      	b.n	800166a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e013      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x4f4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	429a      	cmp	r2, r3
 8001656:	d106      	bne.n	8001666 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d001      	beq.n	800166a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	40007000 	.word	0x40007000
 800167c:	42420060 	.word	0x42420060

08001680 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0d0      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001694:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d910      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b67      	ldr	r3, [pc, #412]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 0207 	bic.w	r2, r3, #7
 80016aa:	4965      	ldr	r1, [pc, #404]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b63      	ldr	r3, [pc, #396]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0b8      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d020      	beq.n	8001712 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016dc:	4b59      	ldr	r3, [pc, #356]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a58      	ldr	r2, [pc, #352]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016f4:	4b53      	ldr	r3, [pc, #332]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	4a52      	ldr	r2, [pc, #328]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	494d      	ldr	r1, [pc, #308]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d040      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	4b47      	ldr	r3, [pc, #284]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d115      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e07f      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173e:	4b41      	ldr	r3, [pc, #260]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e073      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174e:	4b3d      	ldr	r3, [pc, #244]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e06b      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175e:	4b39      	ldr	r3, [pc, #228]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f023 0203 	bic.w	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	4936      	ldr	r1, [pc, #216]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001770:	f7ff f9c2 	bl	8000af8 <HAL_GetTick>
 8001774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	e00a      	b.n	800178e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001778:	f7ff f9be 	bl	8000af8 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d901      	bls.n	800178e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e053      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 020c 	and.w	r2, r3, #12
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	429a      	cmp	r2, r3
 800179e:	d1eb      	bne.n	8001778 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a0:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d210      	bcs.n	80017d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 0207 	bic.w	r2, r3, #7
 80017b6:	4922      	ldr	r1, [pc, #136]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e032      	b.n	8001836 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	4916      	ldr	r1, [pc, #88]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d009      	beq.n	800180e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	490e      	ldr	r1, [pc, #56]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800180e:	f000 f821 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8001812:	4602      	mov	r2, r0
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_ClockConfig+0x1c4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	490a      	ldr	r1, [pc, #40]	; (8001848 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	5ccb      	ldrb	r3, [r1, r3]
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	4a09      	ldr	r2, [pc, #36]	; (800184c <HAL_RCC_ClockConfig+0x1cc>)
 8001828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_RCC_ClockConfig+0x1d0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f920 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40022000 	.word	0x40022000
 8001844:	40021000 	.word	0x40021000
 8001848:	08004854 	.word	0x08004854
 800184c:	20000000 	.word	0x20000000
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001854:	b490      	push	{r4, r7}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800185a:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <HAL_RCC_GetSysClockFreq+0xb0>)
 800185c:	1d3c      	adds	r4, r7, #4
 800185e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001860:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001864:	f240 2301 	movw	r3, #513	; 0x201
 8001868:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	61fb      	str	r3, [r7, #28]
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b04      	cmp	r3, #4
 800188c:	d002      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x40>
 800188e:	2b08      	cmp	r3, #8
 8001890:	d003      	beq.n	800189a <HAL_RCC_GetSysClockFreq+0x46>
 8001892:	e02d      	b.n	80018f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001896:	623b      	str	r3, [r7, #32]
      break;
 8001898:	e02d      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	0c9b      	lsrs	r3, r3, #18
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018a6:	4413      	add	r3, r2
 80018a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d013      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	0c5b      	lsrs	r3, r3, #17
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018c6:	4413      	add	r3, r2
 80018c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018d2:	fb02 f203 	mul.w	r2, r2, r3
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
 80018de:	e004      	b.n	80018ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018e4:	fb02 f303 	mul.w	r3, r2, r3
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	623b      	str	r3, [r7, #32]
      break;
 80018ee:	e002      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018f2:	623b      	str	r3, [r7, #32]
      break;
 80018f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018f6:	6a3b      	ldr	r3, [r7, #32]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc90      	pop	{r4, r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	0800483c 	.word	0x0800483c
 8001908:	40021000 	.word	0x40021000
 800190c:	007a1200 	.word	0x007a1200
 8001910:	003d0900 	.word	0x003d0900

08001914 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001918:	4b02      	ldr	r3, [pc, #8]	; (8001924 <HAL_RCC_GetHCLKFreq+0x10>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	20000000 	.word	0x20000000

08001928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800192c:	f7ff fff2 	bl	8001914 <HAL_RCC_GetHCLKFreq>
 8001930:	4602      	mov	r2, r0
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	4903      	ldr	r1, [pc, #12]	; (800194c <HAL_RCC_GetPCLK1Freq+0x24>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000
 800194c:	08004864 	.word	0x08004864

08001950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001954:	f7ff ffde 	bl	8001914 <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	0adb      	lsrs	r3, r3, #11
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	; (8001974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000
 8001974:	08004864 	.word	0x08004864

08001978 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <RCC_Delay+0x34>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <RCC_Delay+0x38>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	0a5b      	lsrs	r3, r3, #9
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001994:	bf00      	nop
  }
  while (Delay --);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1e5a      	subs	r2, r3, #1
 800199a:	60fa      	str	r2, [r7, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f9      	bne.n	8001994 <RCC_Delay+0x1c>
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	20000000 	.word	0x20000000
 80019b0:	10624dd3 	.word	0x10624dd3

080019b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e03f      	b.n	8001a46 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe fdb8 	bl	8000550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2224      	movs	r2, #36	; 0x24
 80019e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 faa3 	bl	8001f44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2220      	movs	r2, #32
 8001a38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d130      	bne.n	8001aca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_UART_Transmit_IT+0x26>
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e029      	b.n	8001acc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_UART_Transmit_IT+0x38>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e022      	b.n	8001acc <HAL_UART_Transmit_IT+0x7e>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	88fa      	ldrh	r2, [r7, #6]
 8001a98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	88fa      	ldrh	r2, [r7, #6]
 8001a9e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2221      	movs	r2, #33	; 0x21
 8001aaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ac4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001aca:	2302      	movs	r3, #2
  }
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b088      	sub	sp, #32
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10f      	bne.n	8001b2e <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00a      	beq.n	8001b2e <HAL_UART_IRQHandler+0x56>
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_UART_IRQHandler+0x56>
    {
    	UARTIRQHandlerC();
 8001b22:	f7fe fdd1 	bl	80006c8 <UARTIRQHandlerC>
      UART_Receive_IT(huart);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f98b 	bl	8001e42 <UART_Receive_IT>
      return;
 8001b2c:	e0d1      	b.n	8001cd2 <HAL_UART_IRQHandler+0x1fa>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80b0 	beq.w	8001c96 <HAL_UART_IRQHandler+0x1be>
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d105      	bne.n	8001b4c <HAL_UART_IRQHandler+0x74>
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80a5 	beq.w	8001c96 <HAL_UART_IRQHandler+0x1be>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00a      	beq.n	8001b6c <HAL_UART_IRQHandler+0x94>
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_UART_IRQHandler+0x94>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00a      	beq.n	8001b8c <HAL_UART_IRQHandler+0xb4>
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_UART_IRQHandler+0xb4>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	f043 0202 	orr.w	r2, r3, #2
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00a      	beq.n	8001bac <HAL_UART_IRQHandler+0xd4>
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_UART_IRQHandler+0xd4>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba4:	f043 0204 	orr.w	r2, r3, #4
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00f      	beq.n	8001bd6 <HAL_UART_IRQHandler+0xfe>
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d104      	bne.n	8001bca <HAL_UART_IRQHandler+0xf2>
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_UART_IRQHandler+0xfe>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bce:	f043 0208 	orr.w	r2, r3, #8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d078      	beq.n	8001cd0 <HAL_UART_IRQHandler+0x1f8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0320 	and.w	r3, r3, #32
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d007      	beq.n	8001bf8 <HAL_UART_IRQHandler+0x120>
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f925 	bl	8001e42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <HAL_UART_IRQHandler+0x148>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d031      	beq.n	8001c84 <HAL_UART_IRQHandler+0x1ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f876 	bl	8001d12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695b      	ldr	r3, [r3, #20]
 8001c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d023      	beq.n	8001c7c <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	695a      	ldr	r2, [r3, #20]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d013      	beq.n	8001c74 <HAL_UART_IRQHandler+0x19c>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c50:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <HAL_UART_IRQHandler+0x200>)
 8001c52:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff f865 	bl	8000d28 <HAL_DMA_Abort_IT>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d016      	beq.n	8001c92 <HAL_UART_IRQHandler+0x1ba>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c72:	e00e      	b.n	8001c92 <HAL_UART_IRQHandler+0x1ba>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 f843 	bl	8001d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c7a:	e00a      	b.n	8001c92 <HAL_UART_IRQHandler+0x1ba>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f83f 	bl	8001d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c82:	e006      	b.n	8001c92 <HAL_UART_IRQHandler+0x1ba>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f83b 	bl	8001d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001c90:	e01e      	b.n	8001cd0 <HAL_UART_IRQHandler+0x1f8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c92:	bf00      	nop
    return;
 8001c94:	e01c      	b.n	8001cd0 <HAL_UART_IRQHandler+0x1f8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_UART_IRQHandler+0x1da>
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_UART_IRQHandler+0x1da>
  {
    UART_Transmit_IT(huart);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f862 	bl	8001d74 <UART_Transmit_IT>
    return;
 8001cb0:	e00f      	b.n	8001cd2 <HAL_UART_IRQHandler+0x1fa>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00a      	beq.n	8001cd2 <HAL_UART_IRQHandler+0x1fa>
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_UART_IRQHandler+0x1fa>
  {
    UART_EndTransmit_IT(huart);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f8a3 	bl	8001e12 <UART_EndTransmit_IT>
    return;
 8001ccc:	bf00      	nop
 8001cce:	e000      	b.n	8001cd2 <HAL_UART_IRQHandler+0x1fa>
    return;
 8001cd0:	bf00      	nop
  }
}
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	08001d4d 	.word	0x08001d4d

08001cdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr

08001cee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d28:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	695a      	ldr	r2, [r3, #20]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0201 	bic.w	r2, r2, #1
 8001d38:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr

08001d4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f7ff ffca 	bl	8001d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b21      	cmp	r3, #33	; 0x21
 8001d86:	d13e      	bne.n	8001e06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d90:	d114      	bne.n	8001dbc <UART_Transmit_IT+0x48>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d110      	bne.n	8001dbc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	1c9a      	adds	r2, r3, #2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	621a      	str	r2, [r3, #32]
 8001dba:	e008      	b.n	8001dce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	1c59      	adds	r1, r3, #1
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6211      	str	r1, [r2, #32]
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4619      	mov	r1, r3
 8001ddc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10f      	bne.n	8001e02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
  }
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ff52 	bl	8001cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b22      	cmp	r3, #34	; 0x22
 8001e54:	d170      	bne.n	8001f38 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5e:	d117      	bne.n	8001e90 <UART_Receive_IT+0x4e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d113      	bne.n	8001e90 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	1c9a      	adds	r2, r3, #2
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e8e:	e026      	b.n	8001ede <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea2:	d007      	beq.n	8001eb4 <UART_Receive_IT+0x72>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10a      	bne.n	8001ec2 <UART_Receive_IT+0x80>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d106      	bne.n	8001ec2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	701a      	strb	r2, [r3, #0]
 8001ec0:	e008      	b.n	8001ed4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4619      	mov	r1, r3
 8001eec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d120      	bne.n	8001f34 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0220 	bic.w	r2, r2, #32
 8001f00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fedf 	bl	8001cee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e002      	b.n	8001f3a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e000      	b.n	8001f3a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001f38:	2302      	movs	r3, #2
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	695b      	ldr	r3, [r3, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001f7e:	f023 030c 	bic.w	r3, r3, #12
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a2c      	ldr	r2, [pc, #176]	; (8002058 <UART_SetConfig+0x114>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d103      	bne.n	8001fb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fac:	f7ff fcd0 	bl	8001950 <HAL_RCC_GetPCLK2Freq>
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	e002      	b.n	8001fba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fb4:	f7ff fcb8 	bl	8001928 <HAL_RCC_GetPCLK1Freq>
 8001fb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009a      	lsls	r2, r3, #2
 8001fc4:	441a      	add	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	4a22      	ldr	r2, [pc, #136]	; (800205c <UART_SetConfig+0x118>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	0119      	lsls	r1, r3, #4
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009a      	lsls	r2, r3, #2
 8001fe4:	441a      	add	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	; (800205c <UART_SetConfig+0x118>)
 8001ff2:	fba3 0302 	umull	r0, r3, r3, r2
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	2064      	movs	r0, #100	; 0x64
 8001ffa:	fb00 f303 	mul.w	r3, r0, r3
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	3332      	adds	r3, #50	; 0x32
 8002004:	4a15      	ldr	r2, [pc, #84]	; (800205c <UART_SetConfig+0x118>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002010:	4419      	add	r1, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	009a      	lsls	r2, r3, #2
 800201c:	441a      	add	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	fbb2 f2f3 	udiv	r2, r2, r3
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <UART_SetConfig+0x118>)
 800202a:	fba3 0302 	umull	r0, r3, r3, r2
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	2064      	movs	r0, #100	; 0x64
 8002032:	fb00 f303 	mul.w	r3, r0, r3
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	3332      	adds	r3, #50	; 0x32
 800203c:	4a07      	ldr	r2, [pc, #28]	; (800205c <UART_SetConfig+0x118>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	f003 020f 	and.w	r2, r3, #15
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	440a      	add	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002050:	bf00      	nop
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40013800 	.word	0x40013800
 800205c:	51eb851f 	.word	0x51eb851f

08002060 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800206e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002072:	2b84      	cmp	r3, #132	; 0x84
 8002074:	d005      	beq.n	8002082 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002076:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4413      	add	r3, r2
 800207e:	3303      	adds	r3, #3
 8002080:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002092:	f000 fe85 	bl	8002da0 <vTaskStartScheduler>
  
  return osOK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}

0800209c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af04      	add	r7, sp, #16
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d020      	beq.n	80020f0 <osThreadCreate+0x54>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01c      	beq.n	80020f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685c      	ldr	r4, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681d      	ldr	r5, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691e      	ldr	r6, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff ffc9 	bl	8002060 <makeFreeRtosPriority>
 80020ce:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020d8:	9202      	str	r2, [sp, #8]
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	9100      	str	r1, [sp, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	4632      	mov	r2, r6
 80020e2:	4629      	mov	r1, r5
 80020e4:	4620      	mov	r0, r4
 80020e6:	f000 fc9d 	bl	8002a24 <xTaskCreateStatic>
 80020ea:	4603      	mov	r3, r0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	e01c      	b.n	800212a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685c      	ldr	r4, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020fc:	b29e      	uxth	r6, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ffab 	bl	8002060 <makeFreeRtosPriority>
 800210a:	4602      	mov	r2, r0
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	9200      	str	r2, [sp, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	4632      	mov	r2, r6
 8002118:	4629      	mov	r1, r5
 800211a:	4620      	mov	r0, r4
 800211c:	f000 fcde 	bl	8002adc <xTaskCreate>
 8002120:	4603      	mov	r3, r0
 8002122:	2b01      	cmp	r3, #1
 8002124:	d001      	beq.n	800212a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002134 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <osDelay+0x16>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	e000      	b.n	800214c <osDelay+0x18>
 800214a:	2301      	movs	r3, #1
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fdf3 	bl	8002d38 <vTaskDelay>
  
  return osOK;
 8002152:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f103 0208 	add.w	r2, r3, #8
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f103 0208 	add.w	r2, r3, #8
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f103 0208 	add.w	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220e:	d103      	bne.n	8002218 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	e00c      	b.n	8002232 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3308      	adds	r3, #8
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	e002      	b.n	8002226 <vListInsert+0x2e>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	429a      	cmp	r2, r3
 8002230:	d2f6      	bcs.n	8002220 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	bf00      	nop
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6892      	ldr	r2, [r2, #8]
 800227e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6852      	ldr	r2, [r2, #4]
 8002288:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d103      	bne.n	800229c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1e5a      	subs	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
	...

080022bc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022e2:	bf00      	nop
 80022e4:	e7fe      	b.n	80022e4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022e6:	f001 fb59 	bl	800399c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	68f9      	ldr	r1, [r7, #12]
 80022f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	441a      	add	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002316:	3b01      	subs	r3, #1
 8002318:	68f9      	ldr	r1, [r7, #12]
 800231a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	441a      	add	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	22ff      	movs	r2, #255	; 0xff
 800232a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	22ff      	movs	r2, #255	; 0xff
 8002332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d114      	bne.n	8002366 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01a      	beq.n	800237a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3310      	adds	r3, #16
 8002348:	4618      	mov	r0, r3
 800234a:	f000 ff6f 	bl	800322c <xTaskRemoveFromEventList>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d012      	beq.n	800237a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <xQueueGenericReset+0xcc>)
 8002356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	f3bf 8f4f 	dsb	sy
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	e009      	b.n	800237a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3310      	adds	r3, #16
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fef6 	bl	800215c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3324      	adds	r3, #36	; 0x24
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fef1 	bl	800215c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800237a:	f001 fb3f 	bl	80039fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800237e:	2301      	movs	r3, #1
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	e000ed04 	.word	0xe000ed04

0800238c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	4613      	mov	r3, r2
 8002398:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	613b      	str	r3, [r7, #16]
}
 80023b2:	bf00      	nop
 80023b4:	e7fe      	b.n	80023b4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d102      	bne.n	80023c2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	e004      	b.n	80023cc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3348      	adds	r3, #72	; 0x48
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 fba5 	bl	8003b20 <pvPortMalloc>
 80023d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00f      	beq.n	80023fe <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	3348      	adds	r3, #72	; 0x48
 80023e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023ec:	79fa      	ldrb	r2, [r7, #7]
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	4613      	mov	r3, r2
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 f805 	bl	8002408 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80023fe:	69bb      	ldr	r3, [r7, #24]
	}
 8002400:	4618      	mov	r0, r3
 8002402:	3720      	adds	r7, #32
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d103      	bne.n	8002424 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	e002      	b.n	800242a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002436:	2101      	movs	r1, #1
 8002438:	69b8      	ldr	r0, [r7, #24]
 800243a:	f7ff ff3f 	bl	80022bc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08e      	sub	sp, #56	; 0x38
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002456:	2300      	movs	r3, #0
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <xQueueGenericSend+0x32>
	__asm volatile
 8002464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002468:	f383 8811 	msr	BASEPRI, r3
 800246c:	f3bf 8f6f 	isb	sy
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002476:	bf00      	nop
 8002478:	e7fe      	b.n	8002478 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d103      	bne.n	8002488 <xQueueGenericSend+0x40>
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <xQueueGenericSend+0x44>
 8002488:	2301      	movs	r3, #1
 800248a:	e000      	b.n	800248e <xQueueGenericSend+0x46>
 800248c:	2300      	movs	r3, #0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <xQueueGenericSend+0x60>
	__asm volatile
 8002492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024a4:	bf00      	nop
 80024a6:	e7fe      	b.n	80024a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d103      	bne.n	80024b6 <xQueueGenericSend+0x6e>
 80024ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <xQueueGenericSend+0x72>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <xQueueGenericSend+0x74>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10a      	bne.n	80024d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	623b      	str	r3, [r7, #32]
}
 80024d2:	bf00      	nop
 80024d4:	e7fe      	b.n	80024d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024d6:	f001 f869 	bl	80035ac <xTaskGetSchedulerState>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d102      	bne.n	80024e6 <xQueueGenericSend+0x9e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <xQueueGenericSend+0xa2>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <xQueueGenericSend+0xa4>
 80024ea:	2300      	movs	r3, #0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10a      	bne.n	8002506 <xQueueGenericSend+0xbe>
	__asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	61fb      	str	r3, [r7, #28]
}
 8002502:	bf00      	nop
 8002504:	e7fe      	b.n	8002504 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002506:	f001 fa49 	bl	800399c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <xQueueGenericSend+0xd4>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d129      	bne.n	8002570 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	68b9      	ldr	r1, [r7, #8]
 8002520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002522:	f000 f96f 	bl	8002804 <prvCopyDataToQueue>
 8002526:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	2b00      	cmp	r3, #0
 800252e:	d010      	beq.n	8002552 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	3324      	adds	r3, #36	; 0x24
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fe79 	bl	800322c <xTaskRemoveFromEventList>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d013      	beq.n	8002568 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002540:	4b3f      	ldr	r3, [pc, #252]	; (8002640 <xQueueGenericSend+0x1f8>)
 8002542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	e00a      	b.n	8002568 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	2b00      	cmp	r3, #0
 8002556:	d007      	beq.n	8002568 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002558:	4b39      	ldr	r3, [pc, #228]	; (8002640 <xQueueGenericSend+0x1f8>)
 800255a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002568:	f001 fa48 	bl	80039fc <vPortExitCritical>
				return pdPASS;
 800256c:	2301      	movs	r3, #1
 800256e:	e063      	b.n	8002638 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002576:	f001 fa41 	bl	80039fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800257a:	2300      	movs	r3, #0
 800257c:	e05c      	b.n	8002638 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800257e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4618      	mov	r0, r3
 800258a:	f000 feb1 	bl	80032f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800258e:	2301      	movs	r3, #1
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002592:	f001 fa33 	bl	80039fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002596:	f000 fc63 	bl	8002e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800259a:	f001 f9ff 	bl	800399c <vPortEnterCritical>
 800259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025a4:	b25b      	sxtb	r3, r3
 80025a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025aa:	d103      	bne.n	80025b4 <xQueueGenericSend+0x16c>
 80025ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025ba:	b25b      	sxtb	r3, r3
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d103      	bne.n	80025ca <xQueueGenericSend+0x182>
 80025c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ca:	f001 fa17 	bl	80039fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025ce:	1d3a      	adds	r2, r7, #4
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fea0 	bl	800331c <xTaskCheckForTimeOut>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d124      	bne.n	800262c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025e4:	f000 fa06 	bl	80029f4 <prvIsQueueFull>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d018      	beq.n	8002620 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f0:	3310      	adds	r3, #16
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fdf4 	bl	80031e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025fe:	f000 f991 	bl	8002924 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002602:	f000 fc3b 	bl	8002e7c <xTaskResumeAll>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	f47f af7c 	bne.w	8002506 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <xQueueGenericSend+0x1f8>)
 8002610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	e772      	b.n	8002506 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002622:	f000 f97f 	bl	8002924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002626:	f000 fc29 	bl	8002e7c <xTaskResumeAll>
 800262a:	e76c      	b.n	8002506 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800262c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800262e:	f000 f979 	bl	8002924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002632:	f000 fc23 	bl	8002e7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002636:	2300      	movs	r3, #0
		}
	}
}
 8002638:	4618      	mov	r0, r3
 800263a:	3738      	adds	r7, #56	; 0x38
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	e000ed04 	.word	0xe000ed04

08002644 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08c      	sub	sp, #48	; 0x30
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002650:	2300      	movs	r3, #0
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <xQueueReceive+0x30>
	__asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	623b      	str	r3, [r7, #32]
}
 8002670:	bf00      	nop
 8002672:	e7fe      	b.n	8002672 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <xQueueReceive+0x3e>
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <xQueueReceive+0x42>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueReceive+0x44>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <xQueueReceive+0x5e>
	__asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	61fb      	str	r3, [r7, #28]
}
 800269e:	bf00      	nop
 80026a0:	e7fe      	b.n	80026a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026a2:	f000 ff83 	bl	80035ac <xTaskGetSchedulerState>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <xQueueReceive+0x6e>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <xQueueReceive+0x72>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <xQueueReceive+0x74>
 80026b6:	2300      	movs	r3, #0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10a      	bne.n	80026d2 <xQueueReceive+0x8e>
	__asm volatile
 80026bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c0:	f383 8811 	msr	BASEPRI, r3
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	61bb      	str	r3, [r7, #24]
}
 80026ce:	bf00      	nop
 80026d0:	e7fe      	b.n	80026d0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80026d2:	f001 f963 	bl	800399c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01f      	beq.n	8002722 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026e6:	f000 f8f7 	bl	80028d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	1e5a      	subs	r2, r3, #1
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00f      	beq.n	800271a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fc:	3310      	adds	r3, #16
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fd94 	bl	800322c <xTaskRemoveFromEventList>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <xQueueReceive+0x1bc>)
 800270c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800271a:	f001 f96f 	bl	80039fc <vPortExitCritical>
				return pdPASS;
 800271e:	2301      	movs	r3, #1
 8002720:	e069      	b.n	80027f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d103      	bne.n	8002730 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002728:	f001 f968 	bl	80039fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800272c:	2300      	movs	r3, #0
 800272e:	e062      	b.n	80027f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002736:	f107 0310 	add.w	r3, r7, #16
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fdd8 	bl	80032f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002740:	2301      	movs	r3, #1
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002744:	f001 f95a 	bl	80039fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002748:	f000 fb8a 	bl	8002e60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800274c:	f001 f926 	bl	800399c <vPortEnterCritical>
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002756:	b25b      	sxtb	r3, r3
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d103      	bne.n	8002766 <xQueueReceive+0x122>
 800275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800276c:	b25b      	sxtb	r3, r3
 800276e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002772:	d103      	bne.n	800277c <xQueueReceive+0x138>
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800277c:	f001 f93e 	bl	80039fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002780:	1d3a      	adds	r2, r7, #4
 8002782:	f107 0310 	add.w	r3, r7, #16
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fdc7 	bl	800331c <xTaskCheckForTimeOut>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d123      	bne.n	80027dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002796:	f000 f917 	bl	80029c8 <prvIsQueueEmpty>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d017      	beq.n	80027d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a2:	3324      	adds	r3, #36	; 0x24
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fd1b 	bl	80031e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027b0:	f000 f8b8 	bl	8002924 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027b4:	f000 fb62 	bl	8002e7c <xTaskResumeAll>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d189      	bne.n	80026d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <xQueueReceive+0x1bc>)
 80027c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	e780      	b.n	80026d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80027d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027d2:	f000 f8a7 	bl	8002924 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027d6:	f000 fb51 	bl	8002e7c <xTaskResumeAll>
 80027da:	e77a      	b.n	80026d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80027dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027de:	f000 f8a1 	bl	8002924 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027e2:	f000 fb4b 	bl	8002e7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e8:	f000 f8ee 	bl	80029c8 <prvIsQueueEmpty>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f43f af6f 	beq.w	80026d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80027f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3730      	adds	r7, #48	; 0x30
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	e000ed04 	.word	0xe000ed04

08002804 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002818:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10d      	bne.n	800283e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d14d      	bne.n	80028c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4618      	mov	r0, r3
 8002830:	f000 feda 	bl	80035e8 <xTaskPriorityDisinherit>
 8002834:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	e043      	b.n	80028c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d119      	bne.n	8002878 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6898      	ldr	r0, [r3, #8]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	461a      	mov	r2, r3
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	f001 fb68 	bl	8003f24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285c:	441a      	add	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	429a      	cmp	r2, r3
 800286c:	d32b      	bcc.n	80028c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	e026      	b.n	80028c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68d8      	ldr	r0, [r3, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	461a      	mov	r2, r3
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	f001 fb4e 	bl	8003f24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	425b      	negs	r3, r3
 8002892:	441a      	add	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d207      	bcs.n	80028b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	425b      	negs	r3, r3
 80028ae:	441a      	add	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d105      	bne.n	80028c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d002      	beq.n	80028c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80028ce:	697b      	ldr	r3, [r7, #20]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d018      	beq.n	800291c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	441a      	add	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d303      	bcc.n	800290c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68d9      	ldr	r1, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	461a      	mov	r2, r3
 8002916:	6838      	ldr	r0, [r7, #0]
 8002918:	f001 fb04 	bl	8003f24 <memcpy>
	}
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800292c:	f001 f836 	bl	800399c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002936:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002938:	e011      	b.n	800295e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	2b00      	cmp	r3, #0
 8002940:	d012      	beq.n	8002968 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3324      	adds	r3, #36	; 0x24
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fc70 	bl	800322c <xTaskRemoveFromEventList>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002952:	f000 fd45 	bl	80033e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	3b01      	subs	r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800295e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002962:	2b00      	cmp	r3, #0
 8002964:	dce9      	bgt.n	800293a <prvUnlockQueue+0x16>
 8002966:	e000      	b.n	800296a <prvUnlockQueue+0x46>
					break;
 8002968:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	22ff      	movs	r2, #255	; 0xff
 800296e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002972:	f001 f843 	bl	80039fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002976:	f001 f811 	bl	800399c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002980:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002982:	e011      	b.n	80029a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d012      	beq.n	80029b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3310      	adds	r3, #16
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fc4b 	bl	800322c <xTaskRemoveFromEventList>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800299c:	f000 fd20 	bl	80033e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80029a0:	7bbb      	ldrb	r3, [r7, #14]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	dce9      	bgt.n	8002984 <prvUnlockQueue+0x60>
 80029b0:	e000      	b.n	80029b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80029b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	22ff      	movs	r2, #255	; 0xff
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80029bc:	f001 f81e 	bl	80039fc <vPortExitCritical>
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029d0:	f000 ffe4 	bl	800399c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80029dc:	2301      	movs	r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	e001      	b.n	80029e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80029e6:	f001 f809 	bl	80039fc <vPortExitCritical>

	return xReturn;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80029fc:	f000 ffce 	bl	800399c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d102      	bne.n	8002a12 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e001      	b.n	8002a16 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a16:	f000 fff1 	bl	80039fc <vPortExitCritical>

	return xReturn;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08e      	sub	sp, #56	; 0x38
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3c:	f383 8811 	msr	BASEPRI, r3
 8002a40:	f3bf 8f6f 	isb	sy
 8002a44:	f3bf 8f4f 	dsb	sy
 8002a48:	623b      	str	r3, [r7, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	e7fe      	b.n	8002a4c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10a      	bne.n	8002a6a <xTaskCreateStatic+0x46>
	__asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	61fb      	str	r3, [r7, #28]
}
 8002a66:	bf00      	nop
 8002a68:	e7fe      	b.n	8002a68 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002a6a:	2354      	movs	r3, #84	; 0x54
 8002a6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b54      	cmp	r3, #84	; 0x54
 8002a72:	d00a      	beq.n	8002a8a <xTaskCreateStatic+0x66>
	__asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	61bb      	str	r3, [r7, #24]
}
 8002a86:	bf00      	nop
 8002a88:	e7fe      	b.n	8002a88 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01e      	beq.n	8002ace <xTaskCreateStatic+0xaa>
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01b      	beq.n	8002ace <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9303      	str	r3, [sp, #12]
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	9302      	str	r3, [sp, #8]
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f850 	bl	8002b66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ac8:	f000 f8cc 	bl	8002c64 <prvAddNewTaskToReadyList>
 8002acc:	e001      	b.n	8002ad2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002ad2:	697b      	ldr	r3, [r7, #20]
	}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3728      	adds	r7, #40	; 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08c      	sub	sp, #48	; 0x30
 8002ae0:	af04      	add	r7, sp, #16
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aec:	88fb      	ldrh	r3, [r7, #6]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f001 f815 	bl	8003b20 <pvPortMalloc>
 8002af6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00e      	beq.n	8002b1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002afe:	2054      	movs	r0, #84	; 0x54
 8002b00:	f001 f80e 	bl	8003b20 <pvPortMalloc>
 8002b04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
 8002b12:	e005      	b.n	8002b20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002b14:	6978      	ldr	r0, [r7, #20]
 8002b16:	f001 f8c7 	bl	8003ca8 <vPortFree>
 8002b1a:	e001      	b.n	8002b20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d017      	beq.n	8002b56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	2300      	movs	r3, #0
 8002b32:	9303      	str	r3, [sp, #12]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	9302      	str	r3, [sp, #8]
 8002b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	68b9      	ldr	r1, [r7, #8]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f80e 	bl	8002b66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b4a:	69f8      	ldr	r0, [r7, #28]
 8002b4c:	f000 f88a 	bl	8002c64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002b50:	2301      	movs	r3, #1
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	e002      	b.n	8002b5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
	}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3720      	adds	r7, #32
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b088      	sub	sp, #32
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	f023 0307 	bic.w	r3, r3, #7
 8002b8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <prvInitialiseNewTask+0x48>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	617b      	str	r3, [r7, #20]
}
 8002baa:	bf00      	nop
 8002bac:	e7fe      	b.n	8002bac <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	e012      	b.n	8002bda <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	4413      	add	r3, r2
 8002bba:	7819      	ldrb	r1, [r3, #0]
 8002bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3334      	adds	r3, #52	; 0x34
 8002bc4:	460a      	mov	r2, r1
 8002bc6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d006      	beq.n	8002be2 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	2b0f      	cmp	r3, #15
 8002bde:	d9e9      	bls.n	8002bb4 <prvInitialiseNewTask+0x4e>
 8002be0:	e000      	b.n	8002be4 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002be2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d901      	bls.n	8002bf6 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bfa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	2200      	movs	r2, #0
 8002c06:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fac4 	bl	800219a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	3318      	adds	r3, #24
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fabf 	bl	800219a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	f1c3 0207 	rsb	r2, r3, #7
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c34:	2200      	movs	r2, #0
 8002c36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	68f9      	ldr	r1, [r7, #12]
 8002c44:	69b8      	ldr	r0, [r7, #24]
 8002c46:	f000 fdbb 	bl	80037c0 <pxPortInitialiseStack>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c5c:	bf00      	nop
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002c6c:	f000 fe96 	bl	800399c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002c70:	4b2a      	ldr	r3, [pc, #168]	; (8002d1c <prvAddNewTaskToReadyList+0xb8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	4a29      	ldr	r2, [pc, #164]	; (8002d1c <prvAddNewTaskToReadyList+0xb8>)
 8002c78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002c7a:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <prvAddNewTaskToReadyList+0xbc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d109      	bne.n	8002c96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002c82:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <prvAddNewTaskToReadyList+0xbc>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c88:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <prvAddNewTaskToReadyList+0xb8>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d110      	bne.n	8002cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002c90:	f000 fbca 	bl	8003428 <prvInitialiseTaskLists>
 8002c94:	e00d      	b.n	8002cb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <prvAddNewTaskToReadyList+0xc0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <prvAddNewTaskToReadyList+0xbc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d802      	bhi.n	8002cb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002cac:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <prvAddNewTaskToReadyList+0xbc>)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	; (8002d28 <prvAddNewTaskToReadyList+0xc4>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <prvAddNewTaskToReadyList+0xc4>)
 8002cba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	409a      	lsls	r2, r3
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <prvAddNewTaskToReadyList+0xc8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <prvAddNewTaskToReadyList+0xc8>)
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <prvAddNewTaskToReadyList+0xcc>)
 8002cdc:	441a      	add	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	f7ff fa64 	bl	80021b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002cea:	f000 fe87 	bl	80039fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <prvAddNewTaskToReadyList+0xc0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00e      	beq.n	8002d14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <prvAddNewTaskToReadyList+0xbc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d207      	bcs.n	8002d14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002d04:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <prvAddNewTaskToReadyList+0xd0>)
 8002d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20000c5c 	.word	0x20000c5c
 8002d20:	20000b5c 	.word	0x20000b5c
 8002d24:	20000c68 	.word	0x20000c68
 8002d28:	20000c78 	.word	0x20000c78
 8002d2c:	20000c64 	.word	0x20000c64
 8002d30:	20000b60 	.word	0x20000b60
 8002d34:	e000ed04 	.word	0xe000ed04

08002d38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d017      	beq.n	8002d7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002d4a:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <vTaskDelay+0x60>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <vTaskDelay+0x30>
	__asm volatile
 8002d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d56:	f383 8811 	msr	BASEPRI, r3
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	60bb      	str	r3, [r7, #8]
}
 8002d64:	bf00      	nop
 8002d66:	e7fe      	b.n	8002d66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002d68:	f000 f87a 	bl	8002e60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fcc0 	bl	80036f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002d74:	f000 f882 	bl	8002e7c <xTaskResumeAll>
 8002d78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <vTaskDelay+0x64>)
 8002d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000c84 	.word	0x20000c84
 8002d9c:	e000ed04 	.word	0xe000ed04

08002da0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dae:	463a      	mov	r2, r7
 8002db0:	1d39      	adds	r1, r7, #4
 8002db2:	f107 0308 	add.w	r3, r7, #8
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fa52 	bl	8000260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002dbc:	6839      	ldr	r1, [r7, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	9202      	str	r2, [sp, #8]
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	460a      	mov	r2, r1
 8002dce:	491e      	ldr	r1, [pc, #120]	; (8002e48 <vTaskStartScheduler+0xa8>)
 8002dd0:	481e      	ldr	r0, [pc, #120]	; (8002e4c <vTaskStartScheduler+0xac>)
 8002dd2:	f7ff fe27 	bl	8002a24 <xTaskCreateStatic>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	4a1d      	ldr	r2, [pc, #116]	; (8002e50 <vTaskStartScheduler+0xb0>)
 8002dda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <vTaskStartScheduler+0xb0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002de4:	2301      	movs	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	e001      	b.n	8002dee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d116      	bne.n	8002e22 <vTaskStartScheduler+0x82>
	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	613b      	str	r3, [r7, #16]
}
 8002e06:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e08:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <vTaskStartScheduler+0xb4>)
 8002e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e10:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <vTaskStartScheduler+0xb8>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002e16:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <vTaskStartScheduler+0xbc>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e1c:	f000 fd4c 	bl	80038b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e20:	e00e      	b.n	8002e40 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d10a      	bne.n	8002e40 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	60fb      	str	r3, [r7, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	e7fe      	b.n	8002e3e <vTaskStartScheduler+0x9e>
}
 8002e40:	bf00      	nop
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	0800484c 	.word	0x0800484c
 8002e4c:	080033f9 	.word	0x080033f9
 8002e50:	20000c80 	.word	0x20000c80
 8002e54:	20000c7c 	.word	0x20000c7c
 8002e58:	20000c68 	.word	0x20000c68
 8002e5c:	20000c60 	.word	0x20000c60

08002e60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <vTaskSuspendAll+0x18>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	4a03      	ldr	r2, [pc, #12]	; (8002e78 <vTaskSuspendAll+0x18>)
 8002e6c:	6013      	str	r3, [r2, #0]
}
 8002e6e:	bf00      	nop
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bc80      	pop	{r7}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000c84 	.word	0x20000c84

08002e7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002e8a:	4b41      	ldr	r3, [pc, #260]	; (8002f90 <xTaskResumeAll+0x114>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10a      	bne.n	8002ea8 <xTaskResumeAll+0x2c>
	__asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	603b      	str	r3, [r7, #0]
}
 8002ea4:	bf00      	nop
 8002ea6:	e7fe      	b.n	8002ea6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ea8:	f000 fd78 	bl	800399c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002eac:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <xTaskResumeAll+0x114>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	4a37      	ldr	r2, [pc, #220]	; (8002f90 <xTaskResumeAll+0x114>)
 8002eb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eb6:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <xTaskResumeAll+0x114>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d161      	bne.n	8002f82 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ebe:	4b35      	ldr	r3, [pc, #212]	; (8002f94 <xTaskResumeAll+0x118>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d05d      	beq.n	8002f82 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ec6:	e02e      	b.n	8002f26 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002ec8:	4b33      	ldr	r3, [pc, #204]	; (8002f98 <xTaskResumeAll+0x11c>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3318      	adds	r3, #24
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff f9c7 	bl	8002268 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3304      	adds	r3, #4
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff f9c2 	bl	8002268 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee8:	2201      	movs	r2, #1
 8002eea:	409a      	lsls	r2, r3
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <xTaskResumeAll+0x120>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	4a2a      	ldr	r2, [pc, #168]	; (8002f9c <xTaskResumeAll+0x120>)
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002efa:	4613      	mov	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4a27      	ldr	r2, [pc, #156]	; (8002fa0 <xTaskResumeAll+0x124>)
 8002f04:	441a      	add	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4610      	mov	r0, r2
 8002f0e:	f7ff f950 	bl	80021b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f16:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <xTaskResumeAll+0x128>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d302      	bcc.n	8002f26 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <xTaskResumeAll+0x12c>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f26:	4b1c      	ldr	r3, [pc, #112]	; (8002f98 <xTaskResumeAll+0x11c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1cc      	bne.n	8002ec8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f34:	f000 fb16 	bl	8003564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <xTaskResumeAll+0x130>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d010      	beq.n	8002f66 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f44:	f000 f836 	bl	8002fb4 <xTaskIncrementTick>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <xTaskResumeAll+0x12c>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f1      	bne.n	8002f44 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <xTaskResumeAll+0x130>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <xTaskResumeAll+0x12c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <xTaskResumeAll+0x134>)
 8002f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f82:	f000 fd3b 	bl	80039fc <vPortExitCritical>

	return xAlreadyYielded;
 8002f86:	68bb      	ldr	r3, [r7, #8]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000c84 	.word	0x20000c84
 8002f94:	20000c5c 	.word	0x20000c5c
 8002f98:	20000c1c 	.word	0x20000c1c
 8002f9c:	20000c64 	.word	0x20000c64
 8002fa0:	20000b60 	.word	0x20000b60
 8002fa4:	20000b5c 	.word	0x20000b5c
 8002fa8:	20000c70 	.word	0x20000c70
 8002fac:	20000c6c 	.word	0x20000c6c
 8002fb0:	e000ed04 	.word	0xe000ed04

08002fb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fbe:	4b51      	ldr	r3, [pc, #324]	; (8003104 <xTaskIncrementTick+0x150>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f040 808d 	bne.w	80030e2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fc8:	4b4f      	ldr	r3, [pc, #316]	; (8003108 <xTaskIncrementTick+0x154>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002fd0:	4a4d      	ldr	r2, [pc, #308]	; (8003108 <xTaskIncrementTick+0x154>)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d120      	bne.n	800301e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <xTaskIncrementTick+0x158>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <xTaskIncrementTick+0x48>
	__asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	603b      	str	r3, [r7, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <xTaskIncrementTick+0x46>
 8002ffc:	4b43      	ldr	r3, [pc, #268]	; (800310c <xTaskIncrementTick+0x158>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <xTaskIncrementTick+0x15c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a41      	ldr	r2, [pc, #260]	; (800310c <xTaskIncrementTick+0x158>)
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	4a41      	ldr	r2, [pc, #260]	; (8003110 <xTaskIncrementTick+0x15c>)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	4b40      	ldr	r3, [pc, #256]	; (8003114 <xTaskIncrementTick+0x160>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	4a3f      	ldr	r2, [pc, #252]	; (8003114 <xTaskIncrementTick+0x160>)
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	f000 faa3 	bl	8003564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <xTaskIncrementTick+0x164>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	429a      	cmp	r2, r3
 8003026:	d34d      	bcc.n	80030c4 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003028:	4b38      	ldr	r3, [pc, #224]	; (800310c <xTaskIncrementTick+0x158>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <xTaskIncrementTick+0x82>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <xTaskIncrementTick+0x84>
 8003036:	2300      	movs	r3, #0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d004      	beq.n	8003046 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800303c:	4b36      	ldr	r3, [pc, #216]	; (8003118 <xTaskIncrementTick+0x164>)
 800303e:	f04f 32ff 	mov.w	r2, #4294967295
 8003042:	601a      	str	r2, [r3, #0]
					break;
 8003044:	e03e      	b.n	80030c4 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003046:	4b31      	ldr	r3, [pc, #196]	; (800310c <xTaskIncrementTick+0x158>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	429a      	cmp	r2, r3
 800305c:	d203      	bcs.n	8003066 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800305e:	4a2e      	ldr	r2, [pc, #184]	; (8003118 <xTaskIncrementTick+0x164>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6013      	str	r3, [r2, #0]
						break;
 8003064:	e02e      	b.n	80030c4 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	3304      	adds	r3, #4
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff f8fc 	bl	8002268 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	3318      	adds	r3, #24
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff f8f3 	bl	8002268 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	2201      	movs	r2, #1
 8003088:	409a      	lsls	r2, r3
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <xTaskIncrementTick+0x168>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4313      	orrs	r3, r2
 8003090:	4a22      	ldr	r2, [pc, #136]	; (800311c <xTaskIncrementTick+0x168>)
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4a1f      	ldr	r2, [pc, #124]	; (8003120 <xTaskIncrementTick+0x16c>)
 80030a2:	441a      	add	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f7ff f881 	bl	80021b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <xTaskIncrementTick+0x170>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d3b4      	bcc.n	8003028 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80030be:	2301      	movs	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030c2:	e7b1      	b.n	8003028 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <xTaskIncrementTick+0x170>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	4915      	ldr	r1, [pc, #84]	; (8003120 <xTaskIncrementTick+0x16c>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d907      	bls.n	80030ec <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80030dc:	2301      	movs	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e004      	b.n	80030ec <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <xTaskIncrementTick+0x174>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <xTaskIncrementTick+0x174>)
 80030ea:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <xTaskIncrementTick+0x178>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80030f8:	697b      	ldr	r3, [r7, #20]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000c84 	.word	0x20000c84
 8003108:	20000c60 	.word	0x20000c60
 800310c:	20000c14 	.word	0x20000c14
 8003110:	20000c18 	.word	0x20000c18
 8003114:	20000c74 	.word	0x20000c74
 8003118:	20000c7c 	.word	0x20000c7c
 800311c:	20000c64 	.word	0x20000c64
 8003120:	20000b60 	.word	0x20000b60
 8003124:	20000b5c 	.word	0x20000b5c
 8003128:	20000c6c 	.word	0x20000c6c
 800312c:	20000c70 	.word	0x20000c70

08003130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003136:	4b26      	ldr	r3, [pc, #152]	; (80031d0 <vTaskSwitchContext+0xa0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800313e:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <vTaskSwitchContext+0xa4>)
 8003140:	2201      	movs	r2, #1
 8003142:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003144:	e03f      	b.n	80031c6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003146:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <vTaskSwitchContext+0xa4>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <vTaskSwitchContext+0xa8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	fab3 f383 	clz	r3, r3
 8003158:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800315a:	7afb      	ldrb	r3, [r7, #11]
 800315c:	f1c3 031f 	rsb	r3, r3, #31
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	491e      	ldr	r1, [pc, #120]	; (80031dc <vTaskSwitchContext+0xac>)
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10a      	bne.n	800318c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	607b      	str	r3, [r7, #4]
}
 8003188:	bf00      	nop
 800318a:	e7fe      	b.n	800318a <vTaskSwitchContext+0x5a>
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4a11      	ldr	r2, [pc, #68]	; (80031dc <vTaskSwitchContext+0xac>)
 8003198:	4413      	add	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	3308      	adds	r3, #8
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d104      	bne.n	80031bc <vTaskSwitchContext+0x8c>
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	4a07      	ldr	r2, [pc, #28]	; (80031e0 <vTaskSwitchContext+0xb0>)
 80031c4:	6013      	str	r3, [r2, #0]
}
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	20000c84 	.word	0x20000c84
 80031d4:	20000c70 	.word	0x20000c70
 80031d8:	20000c64 	.word	0x20000c64
 80031dc:	20000b60 	.word	0x20000b60
 80031e0:	20000b5c 	.word	0x20000b5c

080031e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	60fb      	str	r3, [r7, #12]
}
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <vTaskPlaceOnEventList+0x44>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3318      	adds	r3, #24
 8003210:	4619      	mov	r1, r3
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fe fff0 	bl	80021f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003218:	2101      	movs	r1, #1
 800321a:	6838      	ldr	r0, [r7, #0]
 800321c:	f000 fa6a 	bl	80036f4 <prvAddCurrentTaskToDelayedList>
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000b5c 	.word	0x20000b5c

0800322c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10a      	bne.n	8003258 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	60fb      	str	r3, [r7, #12]
}
 8003254:	bf00      	nop
 8003256:	e7fe      	b.n	8003256 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	3318      	adds	r3, #24
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff f803 	bl	8002268 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <xTaskRemoveFromEventList+0xac>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d11c      	bne.n	80032a4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	3304      	adds	r3, #4
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fffa 	bl	8002268 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	2201      	movs	r2, #1
 800327a:	409a      	lsls	r2, r3
 800327c:	4b17      	ldr	r3, [pc, #92]	; (80032dc <xTaskRemoveFromEventList+0xb0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4313      	orrs	r3, r2
 8003282:	4a16      	ldr	r2, [pc, #88]	; (80032dc <xTaskRemoveFromEventList+0xb0>)
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <xTaskRemoveFromEventList+0xb4>)
 8003294:	441a      	add	r2, r3
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	3304      	adds	r3, #4
 800329a:	4619      	mov	r1, r3
 800329c:	4610      	mov	r0, r2
 800329e:	f7fe ff88 	bl	80021b2 <vListInsertEnd>
 80032a2:	e005      	b.n	80032b0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	3318      	adds	r3, #24
 80032a8:	4619      	mov	r1, r3
 80032aa:	480e      	ldr	r0, [pc, #56]	; (80032e4 <xTaskRemoveFromEventList+0xb8>)
 80032ac:	f7fe ff81 	bl	80021b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <xTaskRemoveFromEventList+0xbc>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d905      	bls.n	80032ca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80032be:	2301      	movs	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <xTaskRemoveFromEventList+0xc0>)
 80032c4:	2201      	movs	r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	e001      	b.n	80032ce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80032ce:	697b      	ldr	r3, [r7, #20]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000c84 	.word	0x20000c84
 80032dc:	20000c64 	.word	0x20000c64
 80032e0:	20000b60 	.word	0x20000b60
 80032e4:	20000c1c 	.word	0x20000c1c
 80032e8:	20000b5c 	.word	0x20000b5c
 80032ec:	20000c70 	.word	0x20000c70

080032f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <vTaskInternalSetTimeOutState+0x24>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <vTaskInternalSetTimeOutState+0x28>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	605a      	str	r2, [r3, #4]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	20000c74 	.word	0x20000c74
 8003318:	20000c60 	.word	0x20000c60

0800331c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	613b      	str	r3, [r7, #16]
}
 800333e:	bf00      	nop
 8003340:	e7fe      	b.n	8003340 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	60fb      	str	r3, [r7, #12]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800335e:	f000 fb1d 	bl	800399c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003362:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <xTaskCheckForTimeOut+0xbc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d102      	bne.n	8003382 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800337c:	2300      	movs	r3, #0
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	e023      	b.n	80033ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <xTaskCheckForTimeOut+0xc0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d007      	beq.n	800339e <xTaskCheckForTimeOut+0x82>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	429a      	cmp	r2, r3
 8003396:	d302      	bcc.n	800339e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003398:	2301      	movs	r3, #1
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	e015      	b.n	80033ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d20b      	bcs.n	80033c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	1ad2      	subs	r2, r2, r3
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff9b 	bl	80032f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	e004      	b.n	80033ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80033ca:	f000 fb17 	bl	80039fc <vPortExitCritical>

	return xReturn;
 80033ce:	69fb      	ldr	r3, [r7, #28]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3720      	adds	r7, #32
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	20000c60 	.word	0x20000c60
 80033dc:	20000c74 	.word	0x20000c74

080033e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <vTaskMissedYield+0x14>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	20000c70 	.word	0x20000c70

080033f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003400:	f000 f852 	bl	80034a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003404:	4b06      	ldr	r3, [pc, #24]	; (8003420 <prvIdleTask+0x28>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d9f9      	bls.n	8003400 <prvIdleTask+0x8>
			{
				taskYIELD();
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <prvIdleTask+0x2c>)
 800340e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800341c:	e7f0      	b.n	8003400 <prvIdleTask+0x8>
 800341e:	bf00      	nop
 8003420:	20000b60 	.word	0x20000b60
 8003424:	e000ed04 	.word	0xe000ed04

08003428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	e00c      	b.n	800344e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4a12      	ldr	r2, [pc, #72]	; (8003488 <prvInitialiseTaskLists+0x60>)
 8003440:	4413      	add	r3, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fe8a 	bl	800215c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3301      	adds	r3, #1
 800344c:	607b      	str	r3, [r7, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b06      	cmp	r3, #6
 8003452:	d9ef      	bls.n	8003434 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003454:	480d      	ldr	r0, [pc, #52]	; (800348c <prvInitialiseTaskLists+0x64>)
 8003456:	f7fe fe81 	bl	800215c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800345a:	480d      	ldr	r0, [pc, #52]	; (8003490 <prvInitialiseTaskLists+0x68>)
 800345c:	f7fe fe7e 	bl	800215c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003460:	480c      	ldr	r0, [pc, #48]	; (8003494 <prvInitialiseTaskLists+0x6c>)
 8003462:	f7fe fe7b 	bl	800215c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003466:	480c      	ldr	r0, [pc, #48]	; (8003498 <prvInitialiseTaskLists+0x70>)
 8003468:	f7fe fe78 	bl	800215c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800346c:	480b      	ldr	r0, [pc, #44]	; (800349c <prvInitialiseTaskLists+0x74>)
 800346e:	f7fe fe75 	bl	800215c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <prvInitialiseTaskLists+0x78>)
 8003474:	4a05      	ldr	r2, [pc, #20]	; (800348c <prvInitialiseTaskLists+0x64>)
 8003476:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <prvInitialiseTaskLists+0x7c>)
 800347a:	4a05      	ldr	r2, [pc, #20]	; (8003490 <prvInitialiseTaskLists+0x68>)
 800347c:	601a      	str	r2, [r3, #0]
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000b60 	.word	0x20000b60
 800348c:	20000bec 	.word	0x20000bec
 8003490:	20000c00 	.word	0x20000c00
 8003494:	20000c1c 	.word	0x20000c1c
 8003498:	20000c30 	.word	0x20000c30
 800349c:	20000c48 	.word	0x20000c48
 80034a0:	20000c14 	.word	0x20000c14
 80034a4:	20000c18 	.word	0x20000c18

080034a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034ae:	e019      	b.n	80034e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034b0:	f000 fa74 	bl	800399c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80034b4:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <prvCheckTasksWaitingTermination+0x50>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fed1 	bl	8002268 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <prvCheckTasksWaitingTermination+0x54>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	4a0b      	ldr	r2, [pc, #44]	; (80034fc <prvCheckTasksWaitingTermination+0x54>)
 80034ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <prvCheckTasksWaitingTermination+0x58>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	3b01      	subs	r3, #1
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <prvCheckTasksWaitingTermination+0x58>)
 80034d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034da:	f000 fa8f 	bl	80039fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f810 	bl	8003504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034e4:	4b06      	ldr	r3, [pc, #24]	; (8003500 <prvCheckTasksWaitingTermination+0x58>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e1      	bne.n	80034b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000c30 	.word	0x20000c30
 80034fc:	20000c5c 	.word	0x20000c5c
 8003500:	20000c44 	.word	0x20000c44

08003504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003512:	2b00      	cmp	r3, #0
 8003514:	d108      	bne.n	8003528 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fbc4 	bl	8003ca8 <vPortFree>
				vPortFree( pxTCB );
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 fbc1 	bl	8003ca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003526:	e018      	b.n	800355a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800352e:	2b01      	cmp	r3, #1
 8003530:	d103      	bne.n	800353a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fbb8 	bl	8003ca8 <vPortFree>
	}
 8003538:	e00f      	b.n	800355a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003540:	2b02      	cmp	r3, #2
 8003542:	d00a      	beq.n	800355a <prvDeleteTCB+0x56>
	__asm volatile
 8003544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003548:	f383 8811 	msr	BASEPRI, r3
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	f3bf 8f4f 	dsb	sy
 8003554:	60fb      	str	r3, [r7, #12]
}
 8003556:	bf00      	nop
 8003558:	e7fe      	b.n	8003558 <prvDeleteTCB+0x54>
	}
 800355a:	bf00      	nop
 800355c:	3710      	adds	r7, #16
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800356a:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <prvResetNextTaskUnblockTime+0x40>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <prvResetNextTaskUnblockTime+0x14>
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <prvResetNextTaskUnblockTime+0x16>
 8003578:	2300      	movs	r3, #0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d004      	beq.n	8003588 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <prvResetNextTaskUnblockTime+0x44>)
 8003580:	f04f 32ff 	mov.w	r2, #4294967295
 8003584:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003586:	e008      	b.n	800359a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003588:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <prvResetNextTaskUnblockTime+0x40>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <prvResetNextTaskUnblockTime+0x44>)
 8003598:	6013      	str	r3, [r2, #0]
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	20000c14 	.word	0x20000c14
 80035a8:	20000c7c 	.word	0x20000c7c

080035ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80035b2:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <xTaskGetSchedulerState+0x34>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035ba:	2301      	movs	r3, #1
 80035bc:	607b      	str	r3, [r7, #4]
 80035be:	e008      	b.n	80035d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c0:	4b08      	ldr	r3, [pc, #32]	; (80035e4 <xTaskGetSchedulerState+0x38>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80035c8:	2302      	movs	r3, #2
 80035ca:	607b      	str	r3, [r7, #4]
 80035cc:	e001      	b.n	80035d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80035ce:	2300      	movs	r3, #0
 80035d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035d2:	687b      	ldr	r3, [r7, #4]
	}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000c68 	.word	0x20000c68
 80035e4:	20000c84 	.word	0x20000c84

080035e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d06e      	beq.n	80036dc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80035fe:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <xTaskPriorityDisinherit+0x100>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	429a      	cmp	r2, r3
 8003606:	d00a      	beq.n	800361e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	60fb      	str	r3, [r7, #12]
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	60bb      	str	r3, [r7, #8]
}
 8003638:	bf00      	nop
 800363a:	e7fe      	b.n	800363a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	1e5a      	subs	r2, r3, #1
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	429a      	cmp	r2, r3
 8003650:	d044      	beq.n	80036dc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003656:	2b00      	cmp	r3, #0
 8003658:	d140      	bne.n	80036dc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	3304      	adds	r3, #4
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fe02 	bl	8002268 <uxListRemove>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d115      	bne.n	8003696 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366e:	491f      	ldr	r1, [pc, #124]	; (80036ec <xTaskPriorityDisinherit+0x104>)
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10a      	bne.n	8003696 <xTaskPriorityDisinherit+0xae>
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	2201      	movs	r2, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <xTaskPriorityDisinherit+0x108>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4013      	ands	r3, r2
 8003692:	4a17      	ldr	r2, [pc, #92]	; (80036f0 <xTaskPriorityDisinherit+0x108>)
 8003694:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	f1c3 0207 	rsb	r2, r3, #7
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	2201      	movs	r2, #1
 80036b0:	409a      	lsls	r2, r3
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <xTaskPriorityDisinherit+0x108>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	4a0d      	ldr	r2, [pc, #52]	; (80036f0 <xTaskPriorityDisinherit+0x108>)
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4a08      	ldr	r2, [pc, #32]	; (80036ec <xTaskPriorityDisinherit+0x104>)
 80036ca:	441a      	add	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	3304      	adds	r3, #4
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f7fe fd6d 	bl	80021b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80036d8:	2301      	movs	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80036dc:	697b      	ldr	r3, [r7, #20]
	}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000b5c 	.word	0x20000b5c
 80036ec:	20000b60 	.word	0x20000b60
 80036f0:	20000c64 	.word	0x20000c64

080036f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80036fe:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003704:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3304      	adds	r3, #4
 800370a:	4618      	mov	r0, r3
 800370c:	f7fe fdac 	bl	8002268 <uxListRemove>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003716:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	2201      	movs	r2, #1
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43da      	mvns	r2, r3
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4013      	ands	r3, r2
 800372a:	4a20      	ldr	r2, [pc, #128]	; (80037ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800372c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d10a      	bne.n	800374c <prvAddCurrentTaskToDelayedList+0x58>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3304      	adds	r3, #4
 8003742:	4619      	mov	r1, r3
 8003744:	481a      	ldr	r0, [pc, #104]	; (80037b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003746:	f7fe fd34 	bl	80021b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800374a:	e026      	b.n	800379a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4413      	add	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	429a      	cmp	r2, r3
 8003762:	d209      	bcs.n	8003778 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003764:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b0f      	ldr	r3, [pc, #60]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	3304      	adds	r3, #4
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f7fe fd41 	bl	80021f8 <vListInsert>
}
 8003776:	e010      	b.n	800379a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003778:	4b0f      	ldr	r3, [pc, #60]	; (80037b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3304      	adds	r3, #4
 8003782:	4619      	mov	r1, r3
 8003784:	4610      	mov	r0, r2
 8003786:	f7fe fd37 	bl	80021f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800378a:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	429a      	cmp	r2, r3
 8003792:	d202      	bcs.n	800379a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003794:	4a09      	ldr	r2, [pc, #36]	; (80037bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	6013      	str	r3, [r2, #0]
}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000c60 	.word	0x20000c60
 80037a8:	20000b5c 	.word	0x20000b5c
 80037ac:	20000c64 	.word	0x20000c64
 80037b0:	20000c48 	.word	0x20000c48
 80037b4:	20000c18 	.word	0x20000c18
 80037b8:	20000c14 	.word	0x20000c14
 80037bc:	20000c7c 	.word	0x20000c7c

080037c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3b04      	subs	r3, #4
 80037d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3b04      	subs	r3, #4
 80037de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f023 0201 	bic.w	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3b04      	subs	r3, #4
 80037ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80037f0:	4a08      	ldr	r2, [pc, #32]	; (8003814 <pxPortInitialiseStack+0x54>)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	3b14      	subs	r3, #20
 80037fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	3b20      	subs	r3, #32
 8003806:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003808:	68fb      	ldr	r3, [r7, #12]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	bc80      	pop	{r7}
 8003812:	4770      	bx	lr
 8003814:	08003819 	.word	0x08003819

08003818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800381e:	2300      	movs	r3, #0
 8003820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <prvTaskExitError+0x54>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d00a      	beq.n	8003842 <prvTaskExitError+0x2a>
	__asm volatile
 800382c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003830:	f383 8811 	msr	BASEPRI, r3
 8003834:	f3bf 8f6f 	isb	sy
 8003838:	f3bf 8f4f 	dsb	sy
 800383c:	60fb      	str	r3, [r7, #12]
}
 800383e:	bf00      	nop
 8003840:	e7fe      	b.n	8003840 <prvTaskExitError+0x28>
	__asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	60bb      	str	r3, [r7, #8]
}
 8003854:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003856:	bf00      	nop
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0fc      	beq.n	8003858 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	bc80      	pop	{r7}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	2000000c 	.word	0x2000000c

08003870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <pxCurrentTCBConst2>)
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	6808      	ldr	r0, [r1, #0]
 8003876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800387a:	f380 8809 	msr	PSP, r0
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f380 8811 	msr	BASEPRI, r0
 800388a:	f04e 0e0d 	orr.w	lr, lr, #13
 800388e:	4770      	bx	lr

08003890 <pxCurrentTCBConst2>:
 8003890:	20000b5c 	.word	0x20000b5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop

08003898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003898:	4806      	ldr	r0, [pc, #24]	; (80038b4 <prvPortStartFirstTask+0x1c>)
 800389a:	6800      	ldr	r0, [r0, #0]
 800389c:	6800      	ldr	r0, [r0, #0]
 800389e:	f380 8808 	msr	MSP, r0
 80038a2:	b662      	cpsie	i
 80038a4:	b661      	cpsie	f
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	df00      	svc	0
 80038b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80038b2:	bf00      	nop
 80038b4:	e000ed08 	.word	0xe000ed08

080038b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80038be:	4b32      	ldr	r3, [pc, #200]	; (8003988 <xPortStartScheduler+0xd0>)
 80038c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	22ff      	movs	r2, #255	; 0xff
 80038ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4b2a      	ldr	r3, [pc, #168]	; (800398c <xPortStartScheduler+0xd4>)
 80038e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038e6:	4b2a      	ldr	r3, [pc, #168]	; (8003990 <xPortStartScheduler+0xd8>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038ec:	e009      	b.n	8003902 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80038ee:	4b28      	ldr	r3, [pc, #160]	; (8003990 <xPortStartScheduler+0xd8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	4a26      	ldr	r2, [pc, #152]	; (8003990 <xPortStartScheduler+0xd8>)
 80038f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	d0ef      	beq.n	80038ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <xPortStartScheduler+0xd8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f1c3 0307 	rsb	r3, r3, #7
 8003916:	2b04      	cmp	r3, #4
 8003918:	d00a      	beq.n	8003930 <xPortStartScheduler+0x78>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	60bb      	str	r3, [r7, #8]
}
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <xPortStartScheduler+0xd8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	4a16      	ldr	r2, [pc, #88]	; (8003990 <xPortStartScheduler+0xd8>)
 8003938:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <xPortStartScheduler+0xd8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003942:	4a13      	ldr	r2, [pc, #76]	; (8003990 <xPortStartScheduler+0xd8>)
 8003944:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	b2da      	uxtb	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <xPortStartScheduler+0xdc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a10      	ldr	r2, [pc, #64]	; (8003994 <xPortStartScheduler+0xdc>)
 8003954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003958:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <xPortStartScheduler+0xdc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <xPortStartScheduler+0xdc>)
 8003960:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003964:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003966:	f000 f8b9 	bl	8003adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <xPortStartScheduler+0xe0>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003970:	f7ff ff92 	bl	8003898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003974:	f7ff fbdc 	bl	8003130 <vTaskSwitchContext>
	prvTaskExitError();
 8003978:	f7ff ff4e 	bl	8003818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	e000e400 	.word	0xe000e400
 800398c:	20000c88 	.word	0x20000c88
 8003990:	20000c8c 	.word	0x20000c8c
 8003994:	e000ed20 	.word	0xe000ed20
 8003998:	2000000c 	.word	0x2000000c

0800399c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	607b      	str	r3, [r7, #4]
}
 80039b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80039b6:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <vPortEnterCritical+0x58>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	4a0d      	ldr	r2, [pc, #52]	; (80039f4 <vPortEnterCritical+0x58>)
 80039be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <vPortEnterCritical+0x58>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10f      	bne.n	80039e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <vPortEnterCritical+0x5c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	603b      	str	r3, [r7, #0]
}
 80039e4:	bf00      	nop
 80039e6:	e7fe      	b.n	80039e6 <vPortEnterCritical+0x4a>
	}
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bc80      	pop	{r7}
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	2000000c 	.word	0x2000000c
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003a02:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <vPortExitCritical+0x4c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <vPortExitCritical+0x24>
	__asm volatile
 8003a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0e:	f383 8811 	msr	BASEPRI, r3
 8003a12:	f3bf 8f6f 	isb	sy
 8003a16:	f3bf 8f4f 	dsb	sy
 8003a1a:	607b      	str	r3, [r7, #4]
}
 8003a1c:	bf00      	nop
 8003a1e:	e7fe      	b.n	8003a1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <vPortExitCritical+0x4c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <vPortExitCritical+0x4c>)
 8003a28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <vPortExitCritical+0x4c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <vPortExitCritical+0x42>
 8003a32:	2300      	movs	r3, #0
 8003a34:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	2000000c 	.word	0x2000000c
 8003a4c:	00000000 	.word	0x00000000

08003a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003a50:	f3ef 8009 	mrs	r0, PSP
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <pxCurrentTCBConst>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a60:	6010      	str	r0, [r2, #0]
 8003a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003a66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a6a:	f380 8811 	msr	BASEPRI, r0
 8003a6e:	f7ff fb5f 	bl	8003130 <vTaskSwitchContext>
 8003a72:	f04f 0000 	mov.w	r0, #0
 8003a76:	f380 8811 	msr	BASEPRI, r0
 8003a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003a7e:	6819      	ldr	r1, [r3, #0]
 8003a80:	6808      	ldr	r0, [r1, #0]
 8003a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003a86:	f380 8809 	msr	PSP, r0
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	4770      	bx	lr

08003a90 <pxCurrentTCBConst>:
 8003a90:	20000b5c 	.word	0x20000b5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop

08003a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	607b      	str	r3, [r7, #4]
}
 8003ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ab2:	f7ff fa7f 	bl	8002fb4 <xTaskIncrementTick>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <xPortSysTickHandler+0x40>)
 8003abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	f383 8811 	msr	BASEPRI, r3
}
 8003ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ad0:	bf00      	nop
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <vPortSetupTimerInterrupt+0x30>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <vPortSetupTimerInterrupt+0x34>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003aec:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <vPortSetupTimerInterrupt+0x38>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a09      	ldr	r2, [pc, #36]	; (8003b18 <vPortSetupTimerInterrupt+0x3c>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	4a08      	ldr	r2, [pc, #32]	; (8003b1c <vPortSetupTimerInterrupt+0x40>)
 8003afa:	3b01      	subs	r3, #1
 8003afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003afe:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <vPortSetupTimerInterrupt+0x30>)
 8003b00:	2207      	movs	r2, #7
 8003b02:	601a      	str	r2, [r3, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	e000e010 	.word	0xe000e010
 8003b10:	e000e018 	.word	0xe000e018
 8003b14:	20000000 	.word	0x20000000
 8003b18:	10624dd3 	.word	0x10624dd3
 8003b1c:	e000e014 	.word	0xe000e014

08003b20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b2c:	f7ff f998 	bl	8002e60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b30:	4b58      	ldr	r3, [pc, #352]	; (8003c94 <pvPortMalloc+0x174>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b38:	f000 f910 	bl	8003d5c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b3c:	4b56      	ldr	r3, [pc, #344]	; (8003c98 <pvPortMalloc+0x178>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f040 808e 	bne.w	8003c66 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d01d      	beq.n	8003b8c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003b50:	2208      	movs	r2, #8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4413      	add	r3, r2
 8003b56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d014      	beq.n	8003b8c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f023 0307 	bic.w	r3, r3, #7
 8003b68:	3308      	adds	r3, #8
 8003b6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <pvPortMalloc+0x6c>
	__asm volatile
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	617b      	str	r3, [r7, #20]
}
 8003b88:	bf00      	nop
 8003b8a:	e7fe      	b.n	8003b8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d069      	beq.n	8003c66 <pvPortMalloc+0x146>
 8003b92:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <pvPortMalloc+0x17c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d864      	bhi.n	8003c66 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b9c:	4b40      	ldr	r3, [pc, #256]	; (8003ca0 <pvPortMalloc+0x180>)
 8003b9e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ba0:	4b3f      	ldr	r3, [pc, #252]	; (8003ca0 <pvPortMalloc+0x180>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ba6:	e004      	b.n	8003bb2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d903      	bls.n	8003bc4 <pvPortMalloc+0xa4>
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f1      	bne.n	8003ba8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003bc4:	4b33      	ldr	r3, [pc, #204]	; (8003c94 <pvPortMalloc+0x174>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d04b      	beq.n	8003c66 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	4413      	add	r3, r2
 8003bd6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	1ad2      	subs	r2, r2, r3
 8003be8:	2308      	movs	r3, #8
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d91f      	bls.n	8003c30 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <pvPortMalloc+0xf8>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	613b      	str	r3, [r7, #16]
}
 8003c14:	bf00      	nop
 8003c16:	e7fe      	b.n	8003c16 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	1ad2      	subs	r2, r2, r3
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c2a:	69b8      	ldr	r0, [r7, #24]
 8003c2c:	f000 f8f8 	bl	8003e20 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c30:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <pvPortMalloc+0x17c>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	4a18      	ldr	r2, [pc, #96]	; (8003c9c <pvPortMalloc+0x17c>)
 8003c3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c3e:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <pvPortMalloc+0x17c>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <pvPortMalloc+0x184>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d203      	bcs.n	8003c52 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c4a:	4b14      	ldr	r3, [pc, #80]	; (8003c9c <pvPortMalloc+0x17c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <pvPortMalloc+0x184>)
 8003c50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <pvPortMalloc+0x178>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c66:	f7ff f909 	bl	8002e7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <pvPortMalloc+0x16a>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60fb      	str	r3, [r7, #12]
}
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <pvPortMalloc+0x168>
	return pvReturn;
 8003c8a:	69fb      	ldr	r3, [r7, #28]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3728      	adds	r7, #40	; 0x28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20001898 	.word	0x20001898
 8003c98:	200018a4 	.word	0x200018a4
 8003c9c:	2000189c 	.word	0x2000189c
 8003ca0:	20001890 	.word	0x20001890
 8003ca4:	200018a0 	.word	0x200018a0

08003ca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d048      	beq.n	8003d4c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003cba:	2308      	movs	r3, #8
 8003cbc:	425b      	negs	r3, r3
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <vPortFree+0xac>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <vPortFree+0x44>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	60fb      	str	r3, [r7, #12]
}
 8003ce8:	bf00      	nop
 8003cea:	e7fe      	b.n	8003cea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <vPortFree+0x62>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	60bb      	str	r3, [r7, #8]
}
 8003d06:	bf00      	nop
 8003d08:	e7fe      	b.n	8003d08 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4b11      	ldr	r3, [pc, #68]	; (8003d54 <vPortFree+0xac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d019      	beq.n	8003d4c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d115      	bne.n	8003d4c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <vPortFree+0xac>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	401a      	ands	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d30:	f7ff f896 	bl	8002e60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <vPortFree+0xb0>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	4a06      	ldr	r2, [pc, #24]	; (8003d58 <vPortFree+0xb0>)
 8003d40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d42:	6938      	ldr	r0, [r7, #16]
 8003d44:	f000 f86c 	bl	8003e20 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003d48:	f7ff f898 	bl	8002e7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d4c:	bf00      	nop
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	200018a4 	.word	0x200018a4
 8003d58:	2000189c 	.word	0x2000189c

08003d5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d66:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d68:	4b27      	ldr	r3, [pc, #156]	; (8003e08 <prvHeapInit+0xac>)
 8003d6a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00c      	beq.n	8003d90 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3307      	adds	r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0307 	bic.w	r3, r3, #7
 8003d82:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	4a1f      	ldr	r2, [pc, #124]	; (8003e08 <prvHeapInit+0xac>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d94:	4a1d      	ldr	r2, [pc, #116]	; (8003e0c <prvHeapInit+0xb0>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <prvHeapInit+0xb0>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	4413      	add	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003da8:	2208      	movs	r2, #8
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0307 	bic.w	r3, r3, #7
 8003db6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <prvHeapInit+0xb4>)
 8003dbc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003dbe:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <prvHeapInit+0xb4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003dc6:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <prvHeapInit+0xb4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	1ad2      	subs	r2, r2, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ddc:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <prvHeapInit+0xb4>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <prvHeapInit+0xb8>)
 8003dea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a09      	ldr	r2, [pc, #36]	; (8003e18 <prvHeapInit+0xbc>)
 8003df2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <prvHeapInit+0xc0>)
 8003df6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003dfa:	601a      	str	r2, [r3, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000c90 	.word	0x20000c90
 8003e0c:	20001890 	.word	0x20001890
 8003e10:	20001898 	.word	0x20001898
 8003e14:	200018a0 	.word	0x200018a0
 8003e18:	2000189c 	.word	0x2000189c
 8003e1c:	200018a4 	.word	0x200018a4

08003e20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e28:	4b27      	ldr	r3, [pc, #156]	; (8003ec8 <prvInsertBlockIntoFreeList+0xa8>)
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e002      	b.n	8003e34 <prvInsertBlockIntoFreeList+0x14>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d8f7      	bhi.n	8003e2e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	4413      	add	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d108      	bne.n	8003e62 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	441a      	add	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	441a      	add	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d118      	bne.n	8003ea8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b14      	ldr	r3, [pc, #80]	; (8003ecc <prvInsertBlockIntoFreeList+0xac>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d00d      	beq.n	8003e9e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	441a      	add	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e008      	b.n	8003eb0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <prvInsertBlockIntoFreeList+0xac>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	e003      	b.n	8003eb0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d002      	beq.n	8003ebe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	20001890 	.word	0x20001890
 8003ecc:	20001898 	.word	0x20001898

08003ed0 <__errno>:
 8003ed0:	4b01      	ldr	r3, [pc, #4]	; (8003ed8 <__errno+0x8>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000010 	.word	0x20000010

08003edc <__libc_init_array>:
 8003edc:	b570      	push	{r4, r5, r6, lr}
 8003ede:	2500      	movs	r5, #0
 8003ee0:	4e0c      	ldr	r6, [pc, #48]	; (8003f14 <__libc_init_array+0x38>)
 8003ee2:	4c0d      	ldr	r4, [pc, #52]	; (8003f18 <__libc_init_array+0x3c>)
 8003ee4:	1ba4      	subs	r4, r4, r6
 8003ee6:	10a4      	asrs	r4, r4, #2
 8003ee8:	42a5      	cmp	r5, r4
 8003eea:	d109      	bne.n	8003f00 <__libc_init_array+0x24>
 8003eec:	f000 fc36 	bl	800475c <_init>
 8003ef0:	2500      	movs	r5, #0
 8003ef2:	4e0a      	ldr	r6, [pc, #40]	; (8003f1c <__libc_init_array+0x40>)
 8003ef4:	4c0a      	ldr	r4, [pc, #40]	; (8003f20 <__libc_init_array+0x44>)
 8003ef6:	1ba4      	subs	r4, r4, r6
 8003ef8:	10a4      	asrs	r4, r4, #2
 8003efa:	42a5      	cmp	r5, r4
 8003efc:	d105      	bne.n	8003f0a <__libc_init_array+0x2e>
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
 8003f00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f04:	4798      	blx	r3
 8003f06:	3501      	adds	r5, #1
 8003f08:	e7ee      	b.n	8003ee8 <__libc_init_array+0xc>
 8003f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f0e:	4798      	blx	r3
 8003f10:	3501      	adds	r5, #1
 8003f12:	e7f2      	b.n	8003efa <__libc_init_array+0x1e>
 8003f14:	080048a0 	.word	0x080048a0
 8003f18:	080048a0 	.word	0x080048a0
 8003f1c:	080048a0 	.word	0x080048a0
 8003f20:	080048a4 	.word	0x080048a4

08003f24 <memcpy>:
 8003f24:	b510      	push	{r4, lr}
 8003f26:	1e43      	subs	r3, r0, #1
 8003f28:	440a      	add	r2, r1
 8003f2a:	4291      	cmp	r1, r2
 8003f2c:	d100      	bne.n	8003f30 <memcpy+0xc>
 8003f2e:	bd10      	pop	{r4, pc}
 8003f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f38:	e7f7      	b.n	8003f2a <memcpy+0x6>

08003f3a <memset>:
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4402      	add	r2, r0
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d100      	bne.n	8003f44 <memset+0xa>
 8003f42:	4770      	bx	lr
 8003f44:	f803 1b01 	strb.w	r1, [r3], #1
 8003f48:	e7f9      	b.n	8003f3e <memset+0x4>
	...

08003f4c <siprintf>:
 8003f4c:	b40e      	push	{r1, r2, r3}
 8003f4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f52:	b500      	push	{lr}
 8003f54:	b09c      	sub	sp, #112	; 0x70
 8003f56:	ab1d      	add	r3, sp, #116	; 0x74
 8003f58:	9002      	str	r0, [sp, #8]
 8003f5a:	9006      	str	r0, [sp, #24]
 8003f5c:	9107      	str	r1, [sp, #28]
 8003f5e:	9104      	str	r1, [sp, #16]
 8003f60:	4808      	ldr	r0, [pc, #32]	; (8003f84 <siprintf+0x38>)
 8003f62:	4909      	ldr	r1, [pc, #36]	; (8003f88 <siprintf+0x3c>)
 8003f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f68:	9105      	str	r1, [sp, #20]
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	a902      	add	r1, sp, #8
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	f000 f866 	bl	8004040 <_svfiprintf_r>
 8003f74:	2200      	movs	r2, #0
 8003f76:	9b02      	ldr	r3, [sp, #8]
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	b01c      	add	sp, #112	; 0x70
 8003f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f80:	b003      	add	sp, #12
 8003f82:	4770      	bx	lr
 8003f84:	20000010 	.word	0x20000010
 8003f88:	ffff0208 	.word	0xffff0208

08003f8c <__ssputs_r>:
 8003f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f90:	688e      	ldr	r6, [r1, #8]
 8003f92:	4682      	mov	sl, r0
 8003f94:	429e      	cmp	r6, r3
 8003f96:	460c      	mov	r4, r1
 8003f98:	4690      	mov	r8, r2
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	d837      	bhi.n	800400e <__ssputs_r+0x82>
 8003f9e:	898a      	ldrh	r2, [r1, #12]
 8003fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fa4:	d031      	beq.n	800400a <__ssputs_r+0x7e>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	6825      	ldr	r5, [r4, #0]
 8003faa:	6909      	ldr	r1, [r1, #16]
 8003fac:	1a6f      	subs	r7, r5, r1
 8003fae:	6965      	ldr	r5, [r4, #20]
 8003fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fb4:	fb95 f5f3 	sdiv	r5, r5, r3
 8003fb8:	f109 0301 	add.w	r3, r9, #1
 8003fbc:	443b      	add	r3, r7
 8003fbe:	429d      	cmp	r5, r3
 8003fc0:	bf38      	it	cc
 8003fc2:	461d      	movcc	r5, r3
 8003fc4:	0553      	lsls	r3, r2, #21
 8003fc6:	d530      	bpl.n	800402a <__ssputs_r+0x9e>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	f000 fb2d 	bl	8004628 <_malloc_r>
 8003fce:	4606      	mov	r6, r0
 8003fd0:	b950      	cbnz	r0, 8003fe8 <__ssputs_r+0x5c>
 8003fd2:	230c      	movs	r3, #12
 8003fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd8:	f8ca 3000 	str.w	r3, [sl]
 8003fdc:	89a3      	ldrh	r3, [r4, #12]
 8003fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe8:	463a      	mov	r2, r7
 8003fea:	6921      	ldr	r1, [r4, #16]
 8003fec:	f7ff ff9a 	bl	8003f24 <memcpy>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	6126      	str	r6, [r4, #16]
 8003ffe:	443e      	add	r6, r7
 8004000:	6026      	str	r6, [r4, #0]
 8004002:	464e      	mov	r6, r9
 8004004:	6165      	str	r5, [r4, #20]
 8004006:	1bed      	subs	r5, r5, r7
 8004008:	60a5      	str	r5, [r4, #8]
 800400a:	454e      	cmp	r6, r9
 800400c:	d900      	bls.n	8004010 <__ssputs_r+0x84>
 800400e:	464e      	mov	r6, r9
 8004010:	4632      	mov	r2, r6
 8004012:	4641      	mov	r1, r8
 8004014:	6820      	ldr	r0, [r4, #0]
 8004016:	f000 faa1 	bl	800455c <memmove>
 800401a:	68a3      	ldr	r3, [r4, #8]
 800401c:	2000      	movs	r0, #0
 800401e:	1b9b      	subs	r3, r3, r6
 8004020:	60a3      	str	r3, [r4, #8]
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	441e      	add	r6, r3
 8004026:	6026      	str	r6, [r4, #0]
 8004028:	e7dc      	b.n	8003fe4 <__ssputs_r+0x58>
 800402a:	462a      	mov	r2, r5
 800402c:	f000 fb56 	bl	80046dc <_realloc_r>
 8004030:	4606      	mov	r6, r0
 8004032:	2800      	cmp	r0, #0
 8004034:	d1e2      	bne.n	8003ffc <__ssputs_r+0x70>
 8004036:	6921      	ldr	r1, [r4, #16]
 8004038:	4650      	mov	r0, sl
 800403a:	f000 faa9 	bl	8004590 <_free_r>
 800403e:	e7c8      	b.n	8003fd2 <__ssputs_r+0x46>

08004040 <_svfiprintf_r>:
 8004040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004044:	461d      	mov	r5, r3
 8004046:	898b      	ldrh	r3, [r1, #12]
 8004048:	b09d      	sub	sp, #116	; 0x74
 800404a:	061f      	lsls	r7, r3, #24
 800404c:	4680      	mov	r8, r0
 800404e:	460c      	mov	r4, r1
 8004050:	4616      	mov	r6, r2
 8004052:	d50f      	bpl.n	8004074 <_svfiprintf_r+0x34>
 8004054:	690b      	ldr	r3, [r1, #16]
 8004056:	b96b      	cbnz	r3, 8004074 <_svfiprintf_r+0x34>
 8004058:	2140      	movs	r1, #64	; 0x40
 800405a:	f000 fae5 	bl	8004628 <_malloc_r>
 800405e:	6020      	str	r0, [r4, #0]
 8004060:	6120      	str	r0, [r4, #16]
 8004062:	b928      	cbnz	r0, 8004070 <_svfiprintf_r+0x30>
 8004064:	230c      	movs	r3, #12
 8004066:	f8c8 3000 	str.w	r3, [r8]
 800406a:	f04f 30ff 	mov.w	r0, #4294967295
 800406e:	e0c8      	b.n	8004202 <_svfiprintf_r+0x1c2>
 8004070:	2340      	movs	r3, #64	; 0x40
 8004072:	6163      	str	r3, [r4, #20]
 8004074:	2300      	movs	r3, #0
 8004076:	9309      	str	r3, [sp, #36]	; 0x24
 8004078:	2320      	movs	r3, #32
 800407a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800407e:	2330      	movs	r3, #48	; 0x30
 8004080:	f04f 0b01 	mov.w	fp, #1
 8004084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004088:	9503      	str	r5, [sp, #12]
 800408a:	4637      	mov	r7, r6
 800408c:	463d      	mov	r5, r7
 800408e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004092:	b10b      	cbz	r3, 8004098 <_svfiprintf_r+0x58>
 8004094:	2b25      	cmp	r3, #37	; 0x25
 8004096:	d13e      	bne.n	8004116 <_svfiprintf_r+0xd6>
 8004098:	ebb7 0a06 	subs.w	sl, r7, r6
 800409c:	d00b      	beq.n	80040b6 <_svfiprintf_r+0x76>
 800409e:	4653      	mov	r3, sl
 80040a0:	4632      	mov	r2, r6
 80040a2:	4621      	mov	r1, r4
 80040a4:	4640      	mov	r0, r8
 80040a6:	f7ff ff71 	bl	8003f8c <__ssputs_r>
 80040aa:	3001      	adds	r0, #1
 80040ac:	f000 80a4 	beq.w	80041f8 <_svfiprintf_r+0x1b8>
 80040b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b2:	4453      	add	r3, sl
 80040b4:	9309      	str	r3, [sp, #36]	; 0x24
 80040b6:	783b      	ldrb	r3, [r7, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 809d 	beq.w	80041f8 <_svfiprintf_r+0x1b8>
 80040be:	2300      	movs	r3, #0
 80040c0:	f04f 32ff 	mov.w	r2, #4294967295
 80040c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040c8:	9304      	str	r3, [sp, #16]
 80040ca:	9307      	str	r3, [sp, #28]
 80040cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040d0:	931a      	str	r3, [sp, #104]	; 0x68
 80040d2:	462f      	mov	r7, r5
 80040d4:	2205      	movs	r2, #5
 80040d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80040da:	4850      	ldr	r0, [pc, #320]	; (800421c <_svfiprintf_r+0x1dc>)
 80040dc:	f000 fa30 	bl	8004540 <memchr>
 80040e0:	9b04      	ldr	r3, [sp, #16]
 80040e2:	b9d0      	cbnz	r0, 800411a <_svfiprintf_r+0xda>
 80040e4:	06d9      	lsls	r1, r3, #27
 80040e6:	bf44      	itt	mi
 80040e8:	2220      	movmi	r2, #32
 80040ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040ee:	071a      	lsls	r2, r3, #28
 80040f0:	bf44      	itt	mi
 80040f2:	222b      	movmi	r2, #43	; 0x2b
 80040f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040f8:	782a      	ldrb	r2, [r5, #0]
 80040fa:	2a2a      	cmp	r2, #42	; 0x2a
 80040fc:	d015      	beq.n	800412a <_svfiprintf_r+0xea>
 80040fe:	462f      	mov	r7, r5
 8004100:	2000      	movs	r0, #0
 8004102:	250a      	movs	r5, #10
 8004104:	9a07      	ldr	r2, [sp, #28]
 8004106:	4639      	mov	r1, r7
 8004108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800410c:	3b30      	subs	r3, #48	; 0x30
 800410e:	2b09      	cmp	r3, #9
 8004110:	d94d      	bls.n	80041ae <_svfiprintf_r+0x16e>
 8004112:	b1b8      	cbz	r0, 8004144 <_svfiprintf_r+0x104>
 8004114:	e00f      	b.n	8004136 <_svfiprintf_r+0xf6>
 8004116:	462f      	mov	r7, r5
 8004118:	e7b8      	b.n	800408c <_svfiprintf_r+0x4c>
 800411a:	4a40      	ldr	r2, [pc, #256]	; (800421c <_svfiprintf_r+0x1dc>)
 800411c:	463d      	mov	r5, r7
 800411e:	1a80      	subs	r0, r0, r2
 8004120:	fa0b f000 	lsl.w	r0, fp, r0
 8004124:	4318      	orrs	r0, r3
 8004126:	9004      	str	r0, [sp, #16]
 8004128:	e7d3      	b.n	80040d2 <_svfiprintf_r+0x92>
 800412a:	9a03      	ldr	r2, [sp, #12]
 800412c:	1d11      	adds	r1, r2, #4
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	9103      	str	r1, [sp, #12]
 8004132:	2a00      	cmp	r2, #0
 8004134:	db01      	blt.n	800413a <_svfiprintf_r+0xfa>
 8004136:	9207      	str	r2, [sp, #28]
 8004138:	e004      	b.n	8004144 <_svfiprintf_r+0x104>
 800413a:	4252      	negs	r2, r2
 800413c:	f043 0302 	orr.w	r3, r3, #2
 8004140:	9207      	str	r2, [sp, #28]
 8004142:	9304      	str	r3, [sp, #16]
 8004144:	783b      	ldrb	r3, [r7, #0]
 8004146:	2b2e      	cmp	r3, #46	; 0x2e
 8004148:	d10c      	bne.n	8004164 <_svfiprintf_r+0x124>
 800414a:	787b      	ldrb	r3, [r7, #1]
 800414c:	2b2a      	cmp	r3, #42	; 0x2a
 800414e:	d133      	bne.n	80041b8 <_svfiprintf_r+0x178>
 8004150:	9b03      	ldr	r3, [sp, #12]
 8004152:	3702      	adds	r7, #2
 8004154:	1d1a      	adds	r2, r3, #4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	9203      	str	r2, [sp, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	bfb8      	it	lt
 800415e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004162:	9305      	str	r3, [sp, #20]
 8004164:	4d2e      	ldr	r5, [pc, #184]	; (8004220 <_svfiprintf_r+0x1e0>)
 8004166:	2203      	movs	r2, #3
 8004168:	7839      	ldrb	r1, [r7, #0]
 800416a:	4628      	mov	r0, r5
 800416c:	f000 f9e8 	bl	8004540 <memchr>
 8004170:	b138      	cbz	r0, 8004182 <_svfiprintf_r+0x142>
 8004172:	2340      	movs	r3, #64	; 0x40
 8004174:	1b40      	subs	r0, r0, r5
 8004176:	fa03 f000 	lsl.w	r0, r3, r0
 800417a:	9b04      	ldr	r3, [sp, #16]
 800417c:	3701      	adds	r7, #1
 800417e:	4303      	orrs	r3, r0
 8004180:	9304      	str	r3, [sp, #16]
 8004182:	7839      	ldrb	r1, [r7, #0]
 8004184:	2206      	movs	r2, #6
 8004186:	4827      	ldr	r0, [pc, #156]	; (8004224 <_svfiprintf_r+0x1e4>)
 8004188:	1c7e      	adds	r6, r7, #1
 800418a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800418e:	f000 f9d7 	bl	8004540 <memchr>
 8004192:	2800      	cmp	r0, #0
 8004194:	d038      	beq.n	8004208 <_svfiprintf_r+0x1c8>
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <_svfiprintf_r+0x1e8>)
 8004198:	bb13      	cbnz	r3, 80041e0 <_svfiprintf_r+0x1a0>
 800419a:	9b03      	ldr	r3, [sp, #12]
 800419c:	3307      	adds	r3, #7
 800419e:	f023 0307 	bic.w	r3, r3, #7
 80041a2:	3308      	adds	r3, #8
 80041a4:	9303      	str	r3, [sp, #12]
 80041a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041a8:	444b      	add	r3, r9
 80041aa:	9309      	str	r3, [sp, #36]	; 0x24
 80041ac:	e76d      	b.n	800408a <_svfiprintf_r+0x4a>
 80041ae:	fb05 3202 	mla	r2, r5, r2, r3
 80041b2:	2001      	movs	r0, #1
 80041b4:	460f      	mov	r7, r1
 80041b6:	e7a6      	b.n	8004106 <_svfiprintf_r+0xc6>
 80041b8:	2300      	movs	r3, #0
 80041ba:	250a      	movs	r5, #10
 80041bc:	4619      	mov	r1, r3
 80041be:	3701      	adds	r7, #1
 80041c0:	9305      	str	r3, [sp, #20]
 80041c2:	4638      	mov	r0, r7
 80041c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041c8:	3a30      	subs	r2, #48	; 0x30
 80041ca:	2a09      	cmp	r2, #9
 80041cc:	d903      	bls.n	80041d6 <_svfiprintf_r+0x196>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0c8      	beq.n	8004164 <_svfiprintf_r+0x124>
 80041d2:	9105      	str	r1, [sp, #20]
 80041d4:	e7c6      	b.n	8004164 <_svfiprintf_r+0x124>
 80041d6:	fb05 2101 	mla	r1, r5, r1, r2
 80041da:	2301      	movs	r3, #1
 80041dc:	4607      	mov	r7, r0
 80041de:	e7f0      	b.n	80041c2 <_svfiprintf_r+0x182>
 80041e0:	ab03      	add	r3, sp, #12
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	4622      	mov	r2, r4
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <_svfiprintf_r+0x1ec>)
 80041e8:	a904      	add	r1, sp, #16
 80041ea:	4640      	mov	r0, r8
 80041ec:	f3af 8000 	nop.w
 80041f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041f4:	4681      	mov	r9, r0
 80041f6:	d1d6      	bne.n	80041a6 <_svfiprintf_r+0x166>
 80041f8:	89a3      	ldrh	r3, [r4, #12]
 80041fa:	065b      	lsls	r3, r3, #25
 80041fc:	f53f af35 	bmi.w	800406a <_svfiprintf_r+0x2a>
 8004200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004202:	b01d      	add	sp, #116	; 0x74
 8004204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004208:	ab03      	add	r3, sp, #12
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4622      	mov	r2, r4
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <_svfiprintf_r+0x1ec>)
 8004210:	a904      	add	r1, sp, #16
 8004212:	4640      	mov	r0, r8
 8004214:	f000 f882 	bl	800431c <_printf_i>
 8004218:	e7ea      	b.n	80041f0 <_svfiprintf_r+0x1b0>
 800421a:	bf00      	nop
 800421c:	0800486c 	.word	0x0800486c
 8004220:	08004872 	.word	0x08004872
 8004224:	08004876 	.word	0x08004876
 8004228:	00000000 	.word	0x00000000
 800422c:	08003f8d 	.word	0x08003f8d

08004230 <_printf_common>:
 8004230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004234:	4691      	mov	r9, r2
 8004236:	461f      	mov	r7, r3
 8004238:	688a      	ldr	r2, [r1, #8]
 800423a:	690b      	ldr	r3, [r1, #16]
 800423c:	4606      	mov	r6, r0
 800423e:	4293      	cmp	r3, r2
 8004240:	bfb8      	it	lt
 8004242:	4613      	movlt	r3, r2
 8004244:	f8c9 3000 	str.w	r3, [r9]
 8004248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800424c:	460c      	mov	r4, r1
 800424e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004252:	b112      	cbz	r2, 800425a <_printf_common+0x2a>
 8004254:	3301      	adds	r3, #1
 8004256:	f8c9 3000 	str.w	r3, [r9]
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	0699      	lsls	r1, r3, #26
 800425e:	bf42      	ittt	mi
 8004260:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004264:	3302      	addmi	r3, #2
 8004266:	f8c9 3000 	strmi.w	r3, [r9]
 800426a:	6825      	ldr	r5, [r4, #0]
 800426c:	f015 0506 	ands.w	r5, r5, #6
 8004270:	d107      	bne.n	8004282 <_printf_common+0x52>
 8004272:	f104 0a19 	add.w	sl, r4, #25
 8004276:	68e3      	ldr	r3, [r4, #12]
 8004278:	f8d9 2000 	ldr.w	r2, [r9]
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	42ab      	cmp	r3, r5
 8004280:	dc29      	bgt.n	80042d6 <_printf_common+0xa6>
 8004282:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004286:	6822      	ldr	r2, [r4, #0]
 8004288:	3300      	adds	r3, #0
 800428a:	bf18      	it	ne
 800428c:	2301      	movne	r3, #1
 800428e:	0692      	lsls	r2, r2, #26
 8004290:	d42e      	bmi.n	80042f0 <_printf_common+0xc0>
 8004292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004296:	4639      	mov	r1, r7
 8004298:	4630      	mov	r0, r6
 800429a:	47c0      	blx	r8
 800429c:	3001      	adds	r0, #1
 800429e:	d021      	beq.n	80042e4 <_printf_common+0xb4>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	68e5      	ldr	r5, [r4, #12]
 80042a4:	f003 0306 	and.w	r3, r3, #6
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	bf18      	it	ne
 80042ac:	2500      	movne	r5, #0
 80042ae:	f8d9 2000 	ldr.w	r2, [r9]
 80042b2:	f04f 0900 	mov.w	r9, #0
 80042b6:	bf08      	it	eq
 80042b8:	1aad      	subeq	r5, r5, r2
 80042ba:	68a3      	ldr	r3, [r4, #8]
 80042bc:	6922      	ldr	r2, [r4, #16]
 80042be:	bf08      	it	eq
 80042c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042c4:	4293      	cmp	r3, r2
 80042c6:	bfc4      	itt	gt
 80042c8:	1a9b      	subgt	r3, r3, r2
 80042ca:	18ed      	addgt	r5, r5, r3
 80042cc:	341a      	adds	r4, #26
 80042ce:	454d      	cmp	r5, r9
 80042d0:	d11a      	bne.n	8004308 <_printf_common+0xd8>
 80042d2:	2000      	movs	r0, #0
 80042d4:	e008      	b.n	80042e8 <_printf_common+0xb8>
 80042d6:	2301      	movs	r3, #1
 80042d8:	4652      	mov	r2, sl
 80042da:	4639      	mov	r1, r7
 80042dc:	4630      	mov	r0, r6
 80042de:	47c0      	blx	r8
 80042e0:	3001      	adds	r0, #1
 80042e2:	d103      	bne.n	80042ec <_printf_common+0xbc>
 80042e4:	f04f 30ff 	mov.w	r0, #4294967295
 80042e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ec:	3501      	adds	r5, #1
 80042ee:	e7c2      	b.n	8004276 <_printf_common+0x46>
 80042f0:	2030      	movs	r0, #48	; 0x30
 80042f2:	18e1      	adds	r1, r4, r3
 80042f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042fe:	4422      	add	r2, r4
 8004300:	3302      	adds	r3, #2
 8004302:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004306:	e7c4      	b.n	8004292 <_printf_common+0x62>
 8004308:	2301      	movs	r3, #1
 800430a:	4622      	mov	r2, r4
 800430c:	4639      	mov	r1, r7
 800430e:	4630      	mov	r0, r6
 8004310:	47c0      	blx	r8
 8004312:	3001      	adds	r0, #1
 8004314:	d0e6      	beq.n	80042e4 <_printf_common+0xb4>
 8004316:	f109 0901 	add.w	r9, r9, #1
 800431a:	e7d8      	b.n	80042ce <_printf_common+0x9e>

0800431c <_printf_i>:
 800431c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004320:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004324:	460c      	mov	r4, r1
 8004326:	7e09      	ldrb	r1, [r1, #24]
 8004328:	b085      	sub	sp, #20
 800432a:	296e      	cmp	r1, #110	; 0x6e
 800432c:	4617      	mov	r7, r2
 800432e:	4606      	mov	r6, r0
 8004330:	4698      	mov	r8, r3
 8004332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004334:	f000 80b3 	beq.w	800449e <_printf_i+0x182>
 8004338:	d822      	bhi.n	8004380 <_printf_i+0x64>
 800433a:	2963      	cmp	r1, #99	; 0x63
 800433c:	d036      	beq.n	80043ac <_printf_i+0x90>
 800433e:	d80a      	bhi.n	8004356 <_printf_i+0x3a>
 8004340:	2900      	cmp	r1, #0
 8004342:	f000 80b9 	beq.w	80044b8 <_printf_i+0x19c>
 8004346:	2958      	cmp	r1, #88	; 0x58
 8004348:	f000 8083 	beq.w	8004452 <_printf_i+0x136>
 800434c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004350:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004354:	e032      	b.n	80043bc <_printf_i+0xa0>
 8004356:	2964      	cmp	r1, #100	; 0x64
 8004358:	d001      	beq.n	800435e <_printf_i+0x42>
 800435a:	2969      	cmp	r1, #105	; 0x69
 800435c:	d1f6      	bne.n	800434c <_printf_i+0x30>
 800435e:	6820      	ldr	r0, [r4, #0]
 8004360:	6813      	ldr	r3, [r2, #0]
 8004362:	0605      	lsls	r5, r0, #24
 8004364:	f103 0104 	add.w	r1, r3, #4
 8004368:	d52a      	bpl.n	80043c0 <_printf_i+0xa4>
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6011      	str	r1, [r2, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	da03      	bge.n	800437a <_printf_i+0x5e>
 8004372:	222d      	movs	r2, #45	; 0x2d
 8004374:	425b      	negs	r3, r3
 8004376:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800437a:	486f      	ldr	r0, [pc, #444]	; (8004538 <_printf_i+0x21c>)
 800437c:	220a      	movs	r2, #10
 800437e:	e039      	b.n	80043f4 <_printf_i+0xd8>
 8004380:	2973      	cmp	r1, #115	; 0x73
 8004382:	f000 809d 	beq.w	80044c0 <_printf_i+0x1a4>
 8004386:	d808      	bhi.n	800439a <_printf_i+0x7e>
 8004388:	296f      	cmp	r1, #111	; 0x6f
 800438a:	d020      	beq.n	80043ce <_printf_i+0xb2>
 800438c:	2970      	cmp	r1, #112	; 0x70
 800438e:	d1dd      	bne.n	800434c <_printf_i+0x30>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	f043 0320 	orr.w	r3, r3, #32
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	e003      	b.n	80043a2 <_printf_i+0x86>
 800439a:	2975      	cmp	r1, #117	; 0x75
 800439c:	d017      	beq.n	80043ce <_printf_i+0xb2>
 800439e:	2978      	cmp	r1, #120	; 0x78
 80043a0:	d1d4      	bne.n	800434c <_printf_i+0x30>
 80043a2:	2378      	movs	r3, #120	; 0x78
 80043a4:	4865      	ldr	r0, [pc, #404]	; (800453c <_printf_i+0x220>)
 80043a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043aa:	e055      	b.n	8004458 <_printf_i+0x13c>
 80043ac:	6813      	ldr	r3, [r2, #0]
 80043ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043b2:	1d19      	adds	r1, r3, #4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6011      	str	r1, [r2, #0]
 80043b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043bc:	2301      	movs	r3, #1
 80043be:	e08c      	b.n	80044da <_printf_i+0x1be>
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043c6:	6011      	str	r1, [r2, #0]
 80043c8:	bf18      	it	ne
 80043ca:	b21b      	sxthne	r3, r3
 80043cc:	e7cf      	b.n	800436e <_printf_i+0x52>
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	6825      	ldr	r5, [r4, #0]
 80043d2:	1d18      	adds	r0, r3, #4
 80043d4:	6010      	str	r0, [r2, #0]
 80043d6:	0628      	lsls	r0, r5, #24
 80043d8:	d501      	bpl.n	80043de <_printf_i+0xc2>
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	e002      	b.n	80043e4 <_printf_i+0xc8>
 80043de:	0668      	lsls	r0, r5, #25
 80043e0:	d5fb      	bpl.n	80043da <_printf_i+0xbe>
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	296f      	cmp	r1, #111	; 0x6f
 80043e6:	bf14      	ite	ne
 80043e8:	220a      	movne	r2, #10
 80043ea:	2208      	moveq	r2, #8
 80043ec:	4852      	ldr	r0, [pc, #328]	; (8004538 <_printf_i+0x21c>)
 80043ee:	2100      	movs	r1, #0
 80043f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043f4:	6865      	ldr	r5, [r4, #4]
 80043f6:	2d00      	cmp	r5, #0
 80043f8:	60a5      	str	r5, [r4, #8]
 80043fa:	f2c0 8095 	blt.w	8004528 <_printf_i+0x20c>
 80043fe:	6821      	ldr	r1, [r4, #0]
 8004400:	f021 0104 	bic.w	r1, r1, #4
 8004404:	6021      	str	r1, [r4, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d13d      	bne.n	8004486 <_printf_i+0x16a>
 800440a:	2d00      	cmp	r5, #0
 800440c:	f040 808e 	bne.w	800452c <_printf_i+0x210>
 8004410:	4665      	mov	r5, ip
 8004412:	2a08      	cmp	r2, #8
 8004414:	d10b      	bne.n	800442e <_printf_i+0x112>
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	07db      	lsls	r3, r3, #31
 800441a:	d508      	bpl.n	800442e <_printf_i+0x112>
 800441c:	6923      	ldr	r3, [r4, #16]
 800441e:	6862      	ldr	r2, [r4, #4]
 8004420:	429a      	cmp	r2, r3
 8004422:	bfde      	ittt	le
 8004424:	2330      	movle	r3, #48	; 0x30
 8004426:	f805 3c01 	strble.w	r3, [r5, #-1]
 800442a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800442e:	ebac 0305 	sub.w	r3, ip, r5
 8004432:	6123      	str	r3, [r4, #16]
 8004434:	f8cd 8000 	str.w	r8, [sp]
 8004438:	463b      	mov	r3, r7
 800443a:	aa03      	add	r2, sp, #12
 800443c:	4621      	mov	r1, r4
 800443e:	4630      	mov	r0, r6
 8004440:	f7ff fef6 	bl	8004230 <_printf_common>
 8004444:	3001      	adds	r0, #1
 8004446:	d14d      	bne.n	80044e4 <_printf_i+0x1c8>
 8004448:	f04f 30ff 	mov.w	r0, #4294967295
 800444c:	b005      	add	sp, #20
 800444e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004452:	4839      	ldr	r0, [pc, #228]	; (8004538 <_printf_i+0x21c>)
 8004454:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004458:	6813      	ldr	r3, [r2, #0]
 800445a:	6821      	ldr	r1, [r4, #0]
 800445c:	1d1d      	adds	r5, r3, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6015      	str	r5, [r2, #0]
 8004462:	060a      	lsls	r2, r1, #24
 8004464:	d50b      	bpl.n	800447e <_printf_i+0x162>
 8004466:	07ca      	lsls	r2, r1, #31
 8004468:	bf44      	itt	mi
 800446a:	f041 0120 	orrmi.w	r1, r1, #32
 800446e:	6021      	strmi	r1, [r4, #0]
 8004470:	b91b      	cbnz	r3, 800447a <_printf_i+0x15e>
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	f022 0220 	bic.w	r2, r2, #32
 8004478:	6022      	str	r2, [r4, #0]
 800447a:	2210      	movs	r2, #16
 800447c:	e7b7      	b.n	80043ee <_printf_i+0xd2>
 800447e:	064d      	lsls	r5, r1, #25
 8004480:	bf48      	it	mi
 8004482:	b29b      	uxthmi	r3, r3
 8004484:	e7ef      	b.n	8004466 <_printf_i+0x14a>
 8004486:	4665      	mov	r5, ip
 8004488:	fbb3 f1f2 	udiv	r1, r3, r2
 800448c:	fb02 3311 	mls	r3, r2, r1, r3
 8004490:	5cc3      	ldrb	r3, [r0, r3]
 8004492:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004496:	460b      	mov	r3, r1
 8004498:	2900      	cmp	r1, #0
 800449a:	d1f5      	bne.n	8004488 <_printf_i+0x16c>
 800449c:	e7b9      	b.n	8004412 <_printf_i+0xf6>
 800449e:	6813      	ldr	r3, [r2, #0]
 80044a0:	6825      	ldr	r5, [r4, #0]
 80044a2:	1d18      	adds	r0, r3, #4
 80044a4:	6961      	ldr	r1, [r4, #20]
 80044a6:	6010      	str	r0, [r2, #0]
 80044a8:	0628      	lsls	r0, r5, #24
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	d501      	bpl.n	80044b2 <_printf_i+0x196>
 80044ae:	6019      	str	r1, [r3, #0]
 80044b0:	e002      	b.n	80044b8 <_printf_i+0x19c>
 80044b2:	066a      	lsls	r2, r5, #25
 80044b4:	d5fb      	bpl.n	80044ae <_printf_i+0x192>
 80044b6:	8019      	strh	r1, [r3, #0]
 80044b8:	2300      	movs	r3, #0
 80044ba:	4665      	mov	r5, ip
 80044bc:	6123      	str	r3, [r4, #16]
 80044be:	e7b9      	b.n	8004434 <_printf_i+0x118>
 80044c0:	6813      	ldr	r3, [r2, #0]
 80044c2:	1d19      	adds	r1, r3, #4
 80044c4:	6011      	str	r1, [r2, #0]
 80044c6:	681d      	ldr	r5, [r3, #0]
 80044c8:	6862      	ldr	r2, [r4, #4]
 80044ca:	2100      	movs	r1, #0
 80044cc:	4628      	mov	r0, r5
 80044ce:	f000 f837 	bl	8004540 <memchr>
 80044d2:	b108      	cbz	r0, 80044d8 <_printf_i+0x1bc>
 80044d4:	1b40      	subs	r0, r0, r5
 80044d6:	6060      	str	r0, [r4, #4]
 80044d8:	6863      	ldr	r3, [r4, #4]
 80044da:	6123      	str	r3, [r4, #16]
 80044dc:	2300      	movs	r3, #0
 80044de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e2:	e7a7      	b.n	8004434 <_printf_i+0x118>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	462a      	mov	r2, r5
 80044e8:	4639      	mov	r1, r7
 80044ea:	4630      	mov	r0, r6
 80044ec:	47c0      	blx	r8
 80044ee:	3001      	adds	r0, #1
 80044f0:	d0aa      	beq.n	8004448 <_printf_i+0x12c>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	079b      	lsls	r3, r3, #30
 80044f6:	d413      	bmi.n	8004520 <_printf_i+0x204>
 80044f8:	68e0      	ldr	r0, [r4, #12]
 80044fa:	9b03      	ldr	r3, [sp, #12]
 80044fc:	4298      	cmp	r0, r3
 80044fe:	bfb8      	it	lt
 8004500:	4618      	movlt	r0, r3
 8004502:	e7a3      	b.n	800444c <_printf_i+0x130>
 8004504:	2301      	movs	r3, #1
 8004506:	464a      	mov	r2, r9
 8004508:	4639      	mov	r1, r7
 800450a:	4630      	mov	r0, r6
 800450c:	47c0      	blx	r8
 800450e:	3001      	adds	r0, #1
 8004510:	d09a      	beq.n	8004448 <_printf_i+0x12c>
 8004512:	3501      	adds	r5, #1
 8004514:	68e3      	ldr	r3, [r4, #12]
 8004516:	9a03      	ldr	r2, [sp, #12]
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	42ab      	cmp	r3, r5
 800451c:	dcf2      	bgt.n	8004504 <_printf_i+0x1e8>
 800451e:	e7eb      	b.n	80044f8 <_printf_i+0x1dc>
 8004520:	2500      	movs	r5, #0
 8004522:	f104 0919 	add.w	r9, r4, #25
 8004526:	e7f5      	b.n	8004514 <_printf_i+0x1f8>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1ac      	bne.n	8004486 <_printf_i+0x16a>
 800452c:	7803      	ldrb	r3, [r0, #0]
 800452e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004532:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004536:	e76c      	b.n	8004412 <_printf_i+0xf6>
 8004538:	0800487d 	.word	0x0800487d
 800453c:	0800488e 	.word	0x0800488e

08004540 <memchr>:
 8004540:	b510      	push	{r4, lr}
 8004542:	b2c9      	uxtb	r1, r1
 8004544:	4402      	add	r2, r0
 8004546:	4290      	cmp	r0, r2
 8004548:	4603      	mov	r3, r0
 800454a:	d101      	bne.n	8004550 <memchr+0x10>
 800454c:	2300      	movs	r3, #0
 800454e:	e003      	b.n	8004558 <memchr+0x18>
 8004550:	781c      	ldrb	r4, [r3, #0]
 8004552:	3001      	adds	r0, #1
 8004554:	428c      	cmp	r4, r1
 8004556:	d1f6      	bne.n	8004546 <memchr+0x6>
 8004558:	4618      	mov	r0, r3
 800455a:	bd10      	pop	{r4, pc}

0800455c <memmove>:
 800455c:	4288      	cmp	r0, r1
 800455e:	b510      	push	{r4, lr}
 8004560:	eb01 0302 	add.w	r3, r1, r2
 8004564:	d807      	bhi.n	8004576 <memmove+0x1a>
 8004566:	1e42      	subs	r2, r0, #1
 8004568:	4299      	cmp	r1, r3
 800456a:	d00a      	beq.n	8004582 <memmove+0x26>
 800456c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004570:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004574:	e7f8      	b.n	8004568 <memmove+0xc>
 8004576:	4283      	cmp	r3, r0
 8004578:	d9f5      	bls.n	8004566 <memmove+0xa>
 800457a:	1881      	adds	r1, r0, r2
 800457c:	1ad2      	subs	r2, r2, r3
 800457e:	42d3      	cmn	r3, r2
 8004580:	d100      	bne.n	8004584 <memmove+0x28>
 8004582:	bd10      	pop	{r4, pc}
 8004584:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004588:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800458c:	e7f7      	b.n	800457e <memmove+0x22>
	...

08004590 <_free_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4605      	mov	r5, r0
 8004594:	2900      	cmp	r1, #0
 8004596:	d043      	beq.n	8004620 <_free_r+0x90>
 8004598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800459c:	1f0c      	subs	r4, r1, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bfb8      	it	lt
 80045a2:	18e4      	addlt	r4, r4, r3
 80045a4:	f000 f8d0 	bl	8004748 <__malloc_lock>
 80045a8:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <_free_r+0x94>)
 80045aa:	6813      	ldr	r3, [r2, #0]
 80045ac:	4610      	mov	r0, r2
 80045ae:	b933      	cbnz	r3, 80045be <_free_r+0x2e>
 80045b0:	6063      	str	r3, [r4, #4]
 80045b2:	6014      	str	r4, [r2, #0]
 80045b4:	4628      	mov	r0, r5
 80045b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ba:	f000 b8c6 	b.w	800474a <__malloc_unlock>
 80045be:	42a3      	cmp	r3, r4
 80045c0:	d90b      	bls.n	80045da <_free_r+0x4a>
 80045c2:	6821      	ldr	r1, [r4, #0]
 80045c4:	1862      	adds	r2, r4, r1
 80045c6:	4293      	cmp	r3, r2
 80045c8:	bf01      	itttt	eq
 80045ca:	681a      	ldreq	r2, [r3, #0]
 80045cc:	685b      	ldreq	r3, [r3, #4]
 80045ce:	1852      	addeq	r2, r2, r1
 80045d0:	6022      	streq	r2, [r4, #0]
 80045d2:	6063      	str	r3, [r4, #4]
 80045d4:	6004      	str	r4, [r0, #0]
 80045d6:	e7ed      	b.n	80045b4 <_free_r+0x24>
 80045d8:	4613      	mov	r3, r2
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	b10a      	cbz	r2, 80045e2 <_free_r+0x52>
 80045de:	42a2      	cmp	r2, r4
 80045e0:	d9fa      	bls.n	80045d8 <_free_r+0x48>
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	1858      	adds	r0, r3, r1
 80045e6:	42a0      	cmp	r0, r4
 80045e8:	d10b      	bne.n	8004602 <_free_r+0x72>
 80045ea:	6820      	ldr	r0, [r4, #0]
 80045ec:	4401      	add	r1, r0
 80045ee:	1858      	adds	r0, r3, r1
 80045f0:	4282      	cmp	r2, r0
 80045f2:	6019      	str	r1, [r3, #0]
 80045f4:	d1de      	bne.n	80045b4 <_free_r+0x24>
 80045f6:	6810      	ldr	r0, [r2, #0]
 80045f8:	6852      	ldr	r2, [r2, #4]
 80045fa:	4401      	add	r1, r0
 80045fc:	6019      	str	r1, [r3, #0]
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	e7d8      	b.n	80045b4 <_free_r+0x24>
 8004602:	d902      	bls.n	800460a <_free_r+0x7a>
 8004604:	230c      	movs	r3, #12
 8004606:	602b      	str	r3, [r5, #0]
 8004608:	e7d4      	b.n	80045b4 <_free_r+0x24>
 800460a:	6820      	ldr	r0, [r4, #0]
 800460c:	1821      	adds	r1, r4, r0
 800460e:	428a      	cmp	r2, r1
 8004610:	bf01      	itttt	eq
 8004612:	6811      	ldreq	r1, [r2, #0]
 8004614:	6852      	ldreq	r2, [r2, #4]
 8004616:	1809      	addeq	r1, r1, r0
 8004618:	6021      	streq	r1, [r4, #0]
 800461a:	6062      	str	r2, [r4, #4]
 800461c:	605c      	str	r4, [r3, #4]
 800461e:	e7c9      	b.n	80045b4 <_free_r+0x24>
 8004620:	bd38      	pop	{r3, r4, r5, pc}
 8004622:	bf00      	nop
 8004624:	200018a8 	.word	0x200018a8

08004628 <_malloc_r>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	1ccd      	adds	r5, r1, #3
 800462c:	f025 0503 	bic.w	r5, r5, #3
 8004630:	3508      	adds	r5, #8
 8004632:	2d0c      	cmp	r5, #12
 8004634:	bf38      	it	cc
 8004636:	250c      	movcc	r5, #12
 8004638:	2d00      	cmp	r5, #0
 800463a:	4606      	mov	r6, r0
 800463c:	db01      	blt.n	8004642 <_malloc_r+0x1a>
 800463e:	42a9      	cmp	r1, r5
 8004640:	d903      	bls.n	800464a <_malloc_r+0x22>
 8004642:	230c      	movs	r3, #12
 8004644:	6033      	str	r3, [r6, #0]
 8004646:	2000      	movs	r0, #0
 8004648:	bd70      	pop	{r4, r5, r6, pc}
 800464a:	f000 f87d 	bl	8004748 <__malloc_lock>
 800464e:	4a21      	ldr	r2, [pc, #132]	; (80046d4 <_malloc_r+0xac>)
 8004650:	6814      	ldr	r4, [r2, #0]
 8004652:	4621      	mov	r1, r4
 8004654:	b991      	cbnz	r1, 800467c <_malloc_r+0x54>
 8004656:	4c20      	ldr	r4, [pc, #128]	; (80046d8 <_malloc_r+0xb0>)
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	b91b      	cbnz	r3, 8004664 <_malloc_r+0x3c>
 800465c:	4630      	mov	r0, r6
 800465e:	f000 f863 	bl	8004728 <_sbrk_r>
 8004662:	6020      	str	r0, [r4, #0]
 8004664:	4629      	mov	r1, r5
 8004666:	4630      	mov	r0, r6
 8004668:	f000 f85e 	bl	8004728 <_sbrk_r>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d124      	bne.n	80046ba <_malloc_r+0x92>
 8004670:	230c      	movs	r3, #12
 8004672:	4630      	mov	r0, r6
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	f000 f868 	bl	800474a <__malloc_unlock>
 800467a:	e7e4      	b.n	8004646 <_malloc_r+0x1e>
 800467c:	680b      	ldr	r3, [r1, #0]
 800467e:	1b5b      	subs	r3, r3, r5
 8004680:	d418      	bmi.n	80046b4 <_malloc_r+0x8c>
 8004682:	2b0b      	cmp	r3, #11
 8004684:	d90f      	bls.n	80046a6 <_malloc_r+0x7e>
 8004686:	600b      	str	r3, [r1, #0]
 8004688:	18cc      	adds	r4, r1, r3
 800468a:	50cd      	str	r5, [r1, r3]
 800468c:	4630      	mov	r0, r6
 800468e:	f000 f85c 	bl	800474a <__malloc_unlock>
 8004692:	f104 000b 	add.w	r0, r4, #11
 8004696:	1d23      	adds	r3, r4, #4
 8004698:	f020 0007 	bic.w	r0, r0, #7
 800469c:	1ac3      	subs	r3, r0, r3
 800469e:	d0d3      	beq.n	8004648 <_malloc_r+0x20>
 80046a0:	425a      	negs	r2, r3
 80046a2:	50e2      	str	r2, [r4, r3]
 80046a4:	e7d0      	b.n	8004648 <_malloc_r+0x20>
 80046a6:	684b      	ldr	r3, [r1, #4]
 80046a8:	428c      	cmp	r4, r1
 80046aa:	bf16      	itet	ne
 80046ac:	6063      	strne	r3, [r4, #4]
 80046ae:	6013      	streq	r3, [r2, #0]
 80046b0:	460c      	movne	r4, r1
 80046b2:	e7eb      	b.n	800468c <_malloc_r+0x64>
 80046b4:	460c      	mov	r4, r1
 80046b6:	6849      	ldr	r1, [r1, #4]
 80046b8:	e7cc      	b.n	8004654 <_malloc_r+0x2c>
 80046ba:	1cc4      	adds	r4, r0, #3
 80046bc:	f024 0403 	bic.w	r4, r4, #3
 80046c0:	42a0      	cmp	r0, r4
 80046c2:	d005      	beq.n	80046d0 <_malloc_r+0xa8>
 80046c4:	1a21      	subs	r1, r4, r0
 80046c6:	4630      	mov	r0, r6
 80046c8:	f000 f82e 	bl	8004728 <_sbrk_r>
 80046cc:	3001      	adds	r0, #1
 80046ce:	d0cf      	beq.n	8004670 <_malloc_r+0x48>
 80046d0:	6025      	str	r5, [r4, #0]
 80046d2:	e7db      	b.n	800468c <_malloc_r+0x64>
 80046d4:	200018a8 	.word	0x200018a8
 80046d8:	200018ac 	.word	0x200018ac

080046dc <_realloc_r>:
 80046dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046de:	4607      	mov	r7, r0
 80046e0:	4614      	mov	r4, r2
 80046e2:	460e      	mov	r6, r1
 80046e4:	b921      	cbnz	r1, 80046f0 <_realloc_r+0x14>
 80046e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80046ea:	4611      	mov	r1, r2
 80046ec:	f7ff bf9c 	b.w	8004628 <_malloc_r>
 80046f0:	b922      	cbnz	r2, 80046fc <_realloc_r+0x20>
 80046f2:	f7ff ff4d 	bl	8004590 <_free_r>
 80046f6:	4625      	mov	r5, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046fc:	f000 f826 	bl	800474c <_malloc_usable_size_r>
 8004700:	42a0      	cmp	r0, r4
 8004702:	d20f      	bcs.n	8004724 <_realloc_r+0x48>
 8004704:	4621      	mov	r1, r4
 8004706:	4638      	mov	r0, r7
 8004708:	f7ff ff8e 	bl	8004628 <_malloc_r>
 800470c:	4605      	mov	r5, r0
 800470e:	2800      	cmp	r0, #0
 8004710:	d0f2      	beq.n	80046f8 <_realloc_r+0x1c>
 8004712:	4631      	mov	r1, r6
 8004714:	4622      	mov	r2, r4
 8004716:	f7ff fc05 	bl	8003f24 <memcpy>
 800471a:	4631      	mov	r1, r6
 800471c:	4638      	mov	r0, r7
 800471e:	f7ff ff37 	bl	8004590 <_free_r>
 8004722:	e7e9      	b.n	80046f8 <_realloc_r+0x1c>
 8004724:	4635      	mov	r5, r6
 8004726:	e7e7      	b.n	80046f8 <_realloc_r+0x1c>

08004728 <_sbrk_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	2300      	movs	r3, #0
 800472c:	4c05      	ldr	r4, [pc, #20]	; (8004744 <_sbrk_r+0x1c>)
 800472e:	4605      	mov	r5, r0
 8004730:	4608      	mov	r0, r1
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	f7fb ff8c 	bl	8000650 <_sbrk>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d102      	bne.n	8004742 <_sbrk_r+0x1a>
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	b103      	cbz	r3, 8004742 <_sbrk_r+0x1a>
 8004740:	602b      	str	r3, [r5, #0]
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	200018f8 	.word	0x200018f8

08004748 <__malloc_lock>:
 8004748:	4770      	bx	lr

0800474a <__malloc_unlock>:
 800474a:	4770      	bx	lr

0800474c <_malloc_usable_size_r>:
 800474c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004750:	1f18      	subs	r0, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	bfbc      	itt	lt
 8004756:	580b      	ldrlt	r3, [r1, r0]
 8004758:	18c0      	addlt	r0, r0, r3
 800475a:	4770      	bx	lr

0800475c <_init>:
 800475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475e:	bf00      	nop
 8004760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004762:	bc08      	pop	{r3}
 8004764:	469e      	mov	lr, r3
 8004766:	4770      	bx	lr

08004768 <_fini>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr
